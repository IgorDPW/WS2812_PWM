
WS2812_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b38  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08005c48  08005c48  00015c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e60  08005e60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005e60  08005e60  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e60  08005e60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e60  08005e60  00015e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e64  08005e64  00015e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  2000000c  08005e74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  08005e74  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000098cd  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c50  00000000  00000000  00029945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b20  00000000  00000000  0002b598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000897  00000000  00000000  0002c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017bb6  00000000  00000000  0002c94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c744  00000000  00000000  00044505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008cc0a  00000000  00000000  00050c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031d0  00000000  00000000  000dd854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000e0a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c30 	.word	0x08005c30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08005c30 	.word	0x08005c30

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_d2f>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a94:	bf24      	itt	cs
 8000a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9e:	d90d      	bls.n	8000abc <__aeabi_d2f+0x30>
 8000aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab4:	bf08      	it	eq
 8000ab6:	f020 0001 	biceq.w	r0, r0, #1
 8000aba:	4770      	bx	lr
 8000abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ac0:	d121      	bne.n	8000b06 <__aeabi_d2f+0x7a>
 8000ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac6:	bfbc      	itt	lt
 8000ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	4770      	bxlt	lr
 8000ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad6:	f1c2 0218 	rsb	r2, r2, #24
 8000ada:	f1c2 0c20 	rsb	ip, r2, #32
 8000ade:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ae2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	f040 0001 	orrne.w	r0, r0, #1
 8000aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af8:	ea40 000c 	orr.w	r0, r0, ip
 8000afc:	fa23 f302 	lsr.w	r3, r3, r2
 8000b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b04:	e7cc      	b.n	8000aa0 <__aeabi_d2f+0x14>
 8000b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b0a:	d107      	bne.n	8000b1c <__aeabi_d2f+0x90>
 8000b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b10:	bf1e      	ittt	ne
 8000b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b1a:	4770      	bxne	lr
 8000b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_frsub>:
 8000b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b30:	e002      	b.n	8000b38 <__addsf3>
 8000b32:	bf00      	nop

08000b34 <__aeabi_fsub>:
 8000b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b38 <__addsf3>:
 8000b38:	0042      	lsls	r2, r0, #1
 8000b3a:	bf1f      	itttt	ne
 8000b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b40:	ea92 0f03 	teqne	r2, r3
 8000b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b4c:	d06a      	beq.n	8000c24 <__addsf3+0xec>
 8000b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b56:	bfc1      	itttt	gt
 8000b58:	18d2      	addgt	r2, r2, r3
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	4048      	eorgt	r0, r1
 8000b5e:	4041      	eorgt	r1, r0
 8000b60:	bfb8      	it	lt
 8000b62:	425b      	neglt	r3, r3
 8000b64:	2b19      	cmp	r3, #25
 8000b66:	bf88      	it	hi
 8000b68:	4770      	bxhi	lr
 8000b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4249      	negne	r1, r1
 8000b8a:	ea92 0f03 	teq	r2, r3
 8000b8e:	d03f      	beq.n	8000c10 <__addsf3+0xd8>
 8000b90:	f1a2 0201 	sub.w	r2, r2, #1
 8000b94:	fa41 fc03 	asr.w	ip, r1, r3
 8000b98:	eb10 000c 	adds.w	r0, r0, ip
 8000b9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ba0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba8:	d502      	bpl.n	8000bb0 <__addsf3+0x78>
 8000baa:	4249      	negs	r1, r1
 8000bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb4:	d313      	bcc.n	8000bde <__addsf3+0xa6>
 8000bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bba:	d306      	bcc.n	8000bca <__addsf3+0x92>
 8000bbc:	0840      	lsrs	r0, r0, #1
 8000bbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bc2:	f102 0201 	add.w	r2, r2, #1
 8000bc6:	2afe      	cmp	r2, #254	; 0xfe
 8000bc8:	d251      	bcs.n	8000c6e <__addsf3+0x136>
 8000bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bd2:	bf08      	it	eq
 8000bd4:	f020 0001 	biceq.w	r0, r0, #1
 8000bd8:	ea40 0003 	orr.w	r0, r0, r3
 8000bdc:	4770      	bx	lr
 8000bde:	0049      	lsls	r1, r1, #1
 8000be0:	eb40 0000 	adc.w	r0, r0, r0
 8000be4:	3a01      	subs	r2, #1
 8000be6:	bf28      	it	cs
 8000be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bec:	d2ed      	bcs.n	8000bca <__addsf3+0x92>
 8000bee:	fab0 fc80 	clz	ip, r0
 8000bf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfe:	bfaa      	itet	ge
 8000c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c04:	4252      	neglt	r2, r2
 8000c06:	4318      	orrge	r0, r3
 8000c08:	bfbc      	itt	lt
 8000c0a:	40d0      	lsrlt	r0, r2
 8000c0c:	4318      	orrlt	r0, r3
 8000c0e:	4770      	bx	lr
 8000c10:	f092 0f00 	teq	r2, #0
 8000c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c18:	bf06      	itte	eq
 8000c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1e:	3201      	addeq	r2, #1
 8000c20:	3b01      	subne	r3, #1
 8000c22:	e7b5      	b.n	8000b90 <__addsf3+0x58>
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d021      	beq.n	8000c78 <__addsf3+0x140>
 8000c34:	ea92 0f03 	teq	r2, r3
 8000c38:	d004      	beq.n	8000c44 <__addsf3+0x10c>
 8000c3a:	f092 0f00 	teq	r2, #0
 8000c3e:	bf08      	it	eq
 8000c40:	4608      	moveq	r0, r1
 8000c42:	4770      	bx	lr
 8000c44:	ea90 0f01 	teq	r0, r1
 8000c48:	bf1c      	itt	ne
 8000c4a:	2000      	movne	r0, #0
 8000c4c:	4770      	bxne	lr
 8000c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c52:	d104      	bne.n	8000c5e <__addsf3+0x126>
 8000c54:	0040      	lsls	r0, r0, #1
 8000c56:	bf28      	it	cs
 8000c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	4770      	bx	lr
 8000c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c62:	bf3c      	itt	cc
 8000c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c68:	4770      	bxcc	lr
 8000c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c7c:	bf16      	itet	ne
 8000c7e:	4608      	movne	r0, r1
 8000c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c84:	4601      	movne	r1, r0
 8000c86:	0242      	lsls	r2, r0, #9
 8000c88:	bf06      	itte	eq
 8000c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8e:	ea90 0f01 	teqeq	r0, r1
 8000c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_ui2f>:
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e004      	b.n	8000ca8 <__aeabi_i2f+0x8>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_i2f>:
 8000ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	bf48      	it	mi
 8000ca6:	4240      	negmi	r0, r0
 8000ca8:	ea5f 0c00 	movs.w	ip, r0
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb4:	4601      	mov	r1, r0
 8000cb6:	f04f 0000 	mov.w	r0, #0
 8000cba:	e01c      	b.n	8000cf6 <__aeabi_l2f+0x2a>

08000cbc <__aeabi_ul2f>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e00a      	b.n	8000ce0 <__aeabi_l2f+0x14>
 8000cca:	bf00      	nop

08000ccc <__aeabi_l2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__aeabi_l2f+0x14>
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	ea5f 0c01 	movs.w	ip, r1
 8000ce4:	bf02      	ittt	eq
 8000ce6:	4684      	moveq	ip, r0
 8000ce8:	4601      	moveq	r1, r0
 8000cea:	2000      	moveq	r0, #0
 8000cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cf0:	bf08      	it	eq
 8000cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cfa:	fabc f28c 	clz	r2, ip
 8000cfe:	3a08      	subs	r2, #8
 8000d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d04:	db10      	blt.n	8000d28 <__aeabi_l2f+0x5c>
 8000d06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d10:	f1c2 0220 	rsb	r2, r2, #32
 8000d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d18:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1c:	eb43 0002 	adc.w	r0, r3, r2
 8000d20:	bf08      	it	eq
 8000d22:	f020 0001 	biceq.w	r0, r0, #1
 8000d26:	4770      	bx	lr
 8000d28:	f102 0220 	add.w	r2, r2, #32
 8000d2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d30:	f1c2 0220 	rsb	r2, r2, #32
 8000d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d38:	fa21 f202 	lsr.w	r2, r1, r2
 8000d3c:	eb43 0002 	adc.w	r0, r3, r2
 8000d40:	bf08      	it	eq
 8000d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d46:	4770      	bx	lr

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4c:	f000 ff08 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d50:	f000 f82e 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d54:	f000 f984 	bl	8001060 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d58:	f000 f964 	bl	8001024 <MX_DMA_Init>
  MX_TIM1_Init();
 8000d5c:	f000 f8c2 	bl	8000ee4 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000d60:	f000 f882 	bl	8000e68 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  WS2512_Send();
 8000d64:	f000 fd4e 	bl	8001804 <WS2512_Send>

  HAL_ADC_Start(&hadc1);
 8000d68:	480e      	ldr	r0, [pc, #56]	; (8000da4 <main+0x5c>)
 8000d6a:	f001 f857 	bl	8001e1c <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000d6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <main+0x5c>)
 8000d74:	f001 f900 	bl	8001f78 <HAL_ADC_PollForConversion>
		readValue = HAL_ADC_GetValue(&hadc1);
 8000d78:	480a      	ldr	r0, [pc, #40]	; (8000da4 <main+0x5c>)
 8000d7a:	f001 fa03 	bl	8002184 <HAL_ADC_GetValue>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <main+0x60>)
 8000d84:	801a      	strh	r2, [r3, #0]

		var = AnalogHandler(readValue);
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <main+0x60>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fc56 	bl	800163c <AnalogHandler>
 8000d90:	4603      	mov	r3, r0
 8000d92:	4a06      	ldr	r2, [pc, #24]	; (8000dac <main+0x64>)
 8000d94:	6013      	str	r3, [r2, #0]
		LEDHandler(var);
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <main+0x64>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f98e 	bl	80010bc <LEDHandler>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8000da0:	e7e5      	b.n	8000d6e <main+0x26>
 8000da2:	bf00      	nop
 8000da4:	20000028 	.word	0x20000028
 8000da8:	20000188 	.word	0x20000188
 8000dac:	200000e4 	.word	0x200000e4

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	; 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	2228      	movs	r2, #40	; 0x28
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 feaf 	bl	8004b22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dee:	2301      	movs	r3, #1
 8000df0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dfc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 f854 	bl	8002eb4 <HAL_RCC_OscConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e12:	f000 fd65 	bl	80018e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e16:	230f      	movs	r3, #15
 8000e18:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e26:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2102      	movs	r1, #2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 fac0 	bl	80033b8 <HAL_RCC_ClockConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e3e:	f000 fd4f 	bl	80018e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e42:	2302      	movs	r3, #2
 8000e44:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e4a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fc2c 	bl	80036ac <HAL_RCCEx_PeriphCLKConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e5a:	f000 fd41 	bl	80018e0 <Error_Handler>
  }
}
 8000e5e:	bf00      	nop
 8000e60:	3750      	adds	r7, #80	; 0x50
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e78:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_ADC1_Init+0x74>)
 8000e7a:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <MX_ADC1_Init+0x78>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <MX_ADC1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e84:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_ADC1_Init+0x74>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_ADC1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <MX_ADC1_Init+0x74>)
 8000e92:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_ADC1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_ADC1_Init+0x74>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <MX_ADC1_Init+0x74>)
 8000ea6:	f000 fee1 	bl	8001c6c <HAL_ADC_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000eb0:	f000 fd16 	bl	80018e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000eb4:	2309      	movs	r3, #9
 8000eb6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_ADC1_Init+0x74>)
 8000ec6:	f001 f969 	bl	800219c <HAL_ADC_ConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ed0:	f000 fd06 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000028 	.word	0x20000028
 8000ee0:	40012400 	.word	0x40012400

08000ee4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b096      	sub	sp, #88	; 0x58
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2220      	movs	r2, #32
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f003 fe00 	bl	8004b22 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f22:	4b3e      	ldr	r3, [pc, #248]	; (800101c <MX_TIM1_Init+0x138>)
 8000f24:	4a3e      	ldr	r2, [pc, #248]	; (8001020 <MX_TIM1_Init+0x13c>)
 8000f26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f28:	4b3c      	ldr	r3, [pc, #240]	; (800101c <MX_TIM1_Init+0x138>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f2e:	4b3b      	ldr	r3, [pc, #236]	; (800101c <MX_TIM1_Init+0x138>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8000f34:	4b39      	ldr	r3, [pc, #228]	; (800101c <MX_TIM1_Init+0x138>)
 8000f36:	2259      	movs	r2, #89	; 0x59
 8000f38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <MX_TIM1_Init+0x138>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f40:	4b36      	ldr	r3, [pc, #216]	; (800101c <MX_TIM1_Init+0x138>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f46:	4b35      	ldr	r3, [pc, #212]	; (800101c <MX_TIM1_Init+0x138>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f4c:	4833      	ldr	r0, [pc, #204]	; (800101c <MX_TIM1_Init+0x138>)
 8000f4e:	f002 fd19 	bl	8003984 <HAL_TIM_Base_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000f58:	f000 fcc2 	bl	80018e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f66:	4619      	mov	r1, r3
 8000f68:	482c      	ldr	r0, [pc, #176]	; (800101c <MX_TIM1_Init+0x138>)
 8000f6a:	f003 f8dd 	bl	8004128 <HAL_TIM_ConfigClockSource>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000f74:	f000 fcb4 	bl	80018e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f78:	4828      	ldr	r0, [pc, #160]	; (800101c <MX_TIM1_Init+0x138>)
 8000f7a:	f002 fd52 	bl	8003a22 <HAL_TIM_PWM_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000f84:	f000 fcac 	bl	80018e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f94:	4619      	mov	r1, r3
 8000f96:	4821      	ldr	r0, [pc, #132]	; (800101c <MX_TIM1_Init+0x138>)
 8000f98:	f003 fd14 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000fa2:	f000 fc9d 	bl	80018e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa6:	2360      	movs	r3, #96	; 0x60
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4814      	ldr	r0, [pc, #80]	; (800101c <MX_TIM1_Init+0x138>)
 8000fcc:	f002 ffea 	bl	8003fa4 <HAL_TIM_PWM_ConfigChannel>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000fd6:	f000 fc83 	bl	80018e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	4807      	ldr	r0, [pc, #28]	; (800101c <MX_TIM1_Init+0x138>)
 8000ffe:	f003 fd3f 	bl	8004a80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001008:	f000 fc6a 	bl	80018e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <MX_TIM1_Init+0x138>)
 800100e:	f000 fd15 	bl	8001a3c <HAL_TIM_MspPostInit>

}
 8001012:	bf00      	nop
 8001014:	3758      	adds	r7, #88	; 0x58
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000058 	.word	0x20000058
 8001020:	40012c00 	.word	0x40012c00

08001024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800102a:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_DMA_Init+0x38>)
 800102c:	695b      	ldr	r3, [r3, #20]
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <MX_DMA_Init+0x38>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6153      	str	r3, [r2, #20]
 8001036:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_DMA_Init+0x38>)
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200c      	movs	r0, #12
 8001048:	f001 fb13 	bl	8002672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800104c:	200c      	movs	r0, #12
 800104e:	f001 fb2c 	bl	80026aa <HAL_NVIC_EnableIRQ>

}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000

08001060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_GPIO_Init+0x58>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <MX_GPIO_Init+0x58>)
 800106c:	f043 0320 	orr.w	r3, r3, #32
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_GPIO_Init+0x58>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f003 0320 	and.w	r3, r3, #32
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <MX_GPIO_Init+0x58>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <MX_GPIO_Init+0x58>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6193      	str	r3, [r2, #24]
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <MX_GPIO_Init+0x58>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <MX_GPIO_Init+0x58>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <MX_GPIO_Init+0x58>)
 800109c:	f043 0304 	orr.w	r3, r3, #4
 80010a0:	6193      	str	r3, [r2, #24]
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <MX_GPIO_Init+0x58>)
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]

}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000

080010bc <LEDHandler>:

/**
 * @brief  Essa manipula a quantidade de leds que serão acionados mediante a entrada analógica
 * @param	Value 	inteiro de 0 a 100.
 */
void LEDHandler(int Value) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

	int brilho = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]

	brilho = Value * MAX_Brightness / 100;
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	4613      	mov	r3, r2
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	4413      	add	r3, r2
 80010d0:	011a      	lsls	r2, r3, #4
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	4acc      	ldr	r2, [pc, #816]	; (8001408 <LEDHandler+0x34c>)
 80010d6:	fb82 1203 	smull	r1, r2, r2, r3
 80010da:	1152      	asrs	r2, r2, #5
 80010dc:	17db      	asrs	r3, r3, #31
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	60fb      	str	r3, [r7, #12]

	//lógica para acionamento sequencial

	if (Value >= 0 && Value < 10) {
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	db3f      	blt.n	8001168 <LEDHandler+0xac>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b09      	cmp	r3, #9
 80010ec:	dc3c      	bgt.n	8001168 <LEDHandler+0xac>
		Set_LED(0, 255, 0, 0);
 80010ee:	2300      	movs	r3, #0
 80010f0:	2200      	movs	r2, #0
 80010f2:	21ff      	movs	r1, #255	; 0xff
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 fad9 	bl	80016ac <Set_LED>
		Set_LED(1, 0, 0, 0);
 80010fa:	2300      	movs	r3, #0
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2001      	movs	r0, #1
 8001102:	f000 fad3 	bl	80016ac <Set_LED>
		Set_LED(2, 0, 0, 0);
 8001106:	2300      	movs	r3, #0
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2002      	movs	r0, #2
 800110e:	f000 facd 	bl	80016ac <Set_LED>
		Set_LED(3, 0, 0, 0);
 8001112:	2300      	movs	r3, #0
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2003      	movs	r0, #3
 800111a:	f000 fac7 	bl	80016ac <Set_LED>
		Set_LED(4, 0, 0, 0);
 800111e:	2300      	movs	r3, #0
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2004      	movs	r0, #4
 8001126:	f000 fac1 	bl	80016ac <Set_LED>
		Set_LED(5, 0, 0, 0);
 800112a:	2300      	movs	r3, #0
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	2005      	movs	r0, #5
 8001132:	f000 fabb 	bl	80016ac <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001136:	2300      	movs	r3, #0
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2006      	movs	r0, #6
 800113e:	f000 fab5 	bl	80016ac <Set_LED>
		Set_LED(7, 0, 0, 0);
 8001142:	2300      	movs	r3, #0
 8001144:	2200      	movs	r2, #0
 8001146:	2100      	movs	r1, #0
 8001148:	2007      	movs	r0, #7
 800114a:	f000 faaf 	bl	80016ac <Set_LED>
		Set_LED(8, 0, 0, 0);
 800114e:	2300      	movs	r3, #0
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	2008      	movs	r0, #8
 8001156:	f000 faa9 	bl	80016ac <Set_LED>
		Set_LED(9, 0, 0, 0);
 800115a:	2300      	movs	r3, #0
 800115c:	2200      	movs	r2, #0
 800115e:	2100      	movs	r1, #0
 8001160:	2009      	movs	r0, #9
 8001162:	f000 faa3 	bl	80016ac <Set_LED>
 8001166:	e25c      	b.n	8001622 <LEDHandler+0x566>
	} else if (Value >= 11 && Value < 20) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b0a      	cmp	r3, #10
 800116c:	dd3f      	ble.n	80011ee <LEDHandler+0x132>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b13      	cmp	r3, #19
 8001172:	dc3c      	bgt.n	80011ee <LEDHandler+0x132>
		Set_LED(0, 255, 0, 0);
 8001174:	2300      	movs	r3, #0
 8001176:	2200      	movs	r2, #0
 8001178:	21ff      	movs	r1, #255	; 0xff
 800117a:	2000      	movs	r0, #0
 800117c:	f000 fa96 	bl	80016ac <Set_LED>
		Set_LED(1, 255, 0, 0);
 8001180:	2300      	movs	r3, #0
 8001182:	2200      	movs	r2, #0
 8001184:	21ff      	movs	r1, #255	; 0xff
 8001186:	2001      	movs	r0, #1
 8001188:	f000 fa90 	bl	80016ac <Set_LED>
		Set_LED(2, 0, 0, 0);
 800118c:	2300      	movs	r3, #0
 800118e:	2200      	movs	r2, #0
 8001190:	2100      	movs	r1, #0
 8001192:	2002      	movs	r0, #2
 8001194:	f000 fa8a 	bl	80016ac <Set_LED>
		Set_LED(3, 0, 0, 0);
 8001198:	2300      	movs	r3, #0
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2003      	movs	r0, #3
 80011a0:	f000 fa84 	bl	80016ac <Set_LED>
		Set_LED(4, 0, 0, 0);
 80011a4:	2300      	movs	r3, #0
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2004      	movs	r0, #4
 80011ac:	f000 fa7e 	bl	80016ac <Set_LED>
		Set_LED(5, 0, 0, 0);
 80011b0:	2300      	movs	r3, #0
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	2005      	movs	r0, #5
 80011b8:	f000 fa78 	bl	80016ac <Set_LED>
		Set_LED(6, 0, 0, 0);
 80011bc:	2300      	movs	r3, #0
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2006      	movs	r0, #6
 80011c4:	f000 fa72 	bl	80016ac <Set_LED>
		Set_LED(7, 0, 0, 0);
 80011c8:	2300      	movs	r3, #0
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	2007      	movs	r0, #7
 80011d0:	f000 fa6c 	bl	80016ac <Set_LED>
		Set_LED(8, 0, 0, 0);
 80011d4:	2300      	movs	r3, #0
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2008      	movs	r0, #8
 80011dc:	f000 fa66 	bl	80016ac <Set_LED>
		Set_LED(9, 0, 0, 0);
 80011e0:	2300      	movs	r3, #0
 80011e2:	2200      	movs	r2, #0
 80011e4:	2100      	movs	r1, #0
 80011e6:	2009      	movs	r0, #9
 80011e8:	f000 fa60 	bl	80016ac <Set_LED>
 80011ec:	e219      	b.n	8001622 <LEDHandler+0x566>
	} else if (Value >= 21 && Value < 30) {
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b14      	cmp	r3, #20
 80011f2:	dd3f      	ble.n	8001274 <LEDHandler+0x1b8>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b1d      	cmp	r3, #29
 80011f8:	dc3c      	bgt.n	8001274 <LEDHandler+0x1b8>
		Set_LED(0, 255, 0, 0);
 80011fa:	2300      	movs	r3, #0
 80011fc:	2200      	movs	r2, #0
 80011fe:	21ff      	movs	r1, #255	; 0xff
 8001200:	2000      	movs	r0, #0
 8001202:	f000 fa53 	bl	80016ac <Set_LED>
		Set_LED(1, 255, 0, 0);
 8001206:	2300      	movs	r3, #0
 8001208:	2200      	movs	r2, #0
 800120a:	21ff      	movs	r1, #255	; 0xff
 800120c:	2001      	movs	r0, #1
 800120e:	f000 fa4d 	bl	80016ac <Set_LED>
		Set_LED(2, 255, 0, 0);
 8001212:	2300      	movs	r3, #0
 8001214:	2200      	movs	r2, #0
 8001216:	21ff      	movs	r1, #255	; 0xff
 8001218:	2002      	movs	r0, #2
 800121a:	f000 fa47 	bl	80016ac <Set_LED>
		Set_LED(3, 0, 0, 0);
 800121e:	2300      	movs	r3, #0
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	2003      	movs	r0, #3
 8001226:	f000 fa41 	bl	80016ac <Set_LED>
		Set_LED(4, 0, 0, 0);
 800122a:	2300      	movs	r3, #0
 800122c:	2200      	movs	r2, #0
 800122e:	2100      	movs	r1, #0
 8001230:	2004      	movs	r0, #4
 8001232:	f000 fa3b 	bl	80016ac <Set_LED>
		Set_LED(5, 0, 0, 0);
 8001236:	2300      	movs	r3, #0
 8001238:	2200      	movs	r2, #0
 800123a:	2100      	movs	r1, #0
 800123c:	2005      	movs	r0, #5
 800123e:	f000 fa35 	bl	80016ac <Set_LED>
		Set_LED(6, 0, 0, 0);
 8001242:	2300      	movs	r3, #0
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	2006      	movs	r0, #6
 800124a:	f000 fa2f 	bl	80016ac <Set_LED>
		Set_LED(7, 0, 0, 0);
 800124e:	2300      	movs	r3, #0
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	2007      	movs	r0, #7
 8001256:	f000 fa29 	bl	80016ac <Set_LED>
		Set_LED(8, 0, 0, 0);
 800125a:	2300      	movs	r3, #0
 800125c:	2200      	movs	r2, #0
 800125e:	2100      	movs	r1, #0
 8001260:	2008      	movs	r0, #8
 8001262:	f000 fa23 	bl	80016ac <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001266:	2300      	movs	r3, #0
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2009      	movs	r0, #9
 800126e:	f000 fa1d 	bl	80016ac <Set_LED>
 8001272:	e1d6      	b.n	8001622 <LEDHandler+0x566>
	} else if (Value >= 31 && Value < 40) {
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b1e      	cmp	r3, #30
 8001278:	dd3f      	ble.n	80012fa <LEDHandler+0x23e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b27      	cmp	r3, #39	; 0x27
 800127e:	dc3c      	bgt.n	80012fa <LEDHandler+0x23e>
		Set_LED(0, 255, 0, 0);
 8001280:	2300      	movs	r3, #0
 8001282:	2200      	movs	r2, #0
 8001284:	21ff      	movs	r1, #255	; 0xff
 8001286:	2000      	movs	r0, #0
 8001288:	f000 fa10 	bl	80016ac <Set_LED>
		Set_LED(1, 255, 0, 0);
 800128c:	2300      	movs	r3, #0
 800128e:	2200      	movs	r2, #0
 8001290:	21ff      	movs	r1, #255	; 0xff
 8001292:	2001      	movs	r0, #1
 8001294:	f000 fa0a 	bl	80016ac <Set_LED>
		Set_LED(2, 255, 0, 0);
 8001298:	2300      	movs	r3, #0
 800129a:	2200      	movs	r2, #0
 800129c:	21ff      	movs	r1, #255	; 0xff
 800129e:	2002      	movs	r0, #2
 80012a0:	f000 fa04 	bl	80016ac <Set_LED>
		Set_LED(3, 255, 0, 0);
 80012a4:	2300      	movs	r3, #0
 80012a6:	2200      	movs	r2, #0
 80012a8:	21ff      	movs	r1, #255	; 0xff
 80012aa:	2003      	movs	r0, #3
 80012ac:	f000 f9fe 	bl	80016ac <Set_LED>
		Set_LED(4, 0, 0, 0);
 80012b0:	2300      	movs	r3, #0
 80012b2:	2200      	movs	r2, #0
 80012b4:	2100      	movs	r1, #0
 80012b6:	2004      	movs	r0, #4
 80012b8:	f000 f9f8 	bl	80016ac <Set_LED>
		Set_LED(5, 0, 0, 0);
 80012bc:	2300      	movs	r3, #0
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	2005      	movs	r0, #5
 80012c4:	f000 f9f2 	bl	80016ac <Set_LED>
		Set_LED(6, 0, 0, 0);
 80012c8:	2300      	movs	r3, #0
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	2006      	movs	r0, #6
 80012d0:	f000 f9ec 	bl	80016ac <Set_LED>
		Set_LED(7, 0, 0, 0);
 80012d4:	2300      	movs	r3, #0
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2007      	movs	r0, #7
 80012dc:	f000 f9e6 	bl	80016ac <Set_LED>
		Set_LED(8, 0, 0, 0);
 80012e0:	2300      	movs	r3, #0
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2008      	movs	r0, #8
 80012e8:	f000 f9e0 	bl	80016ac <Set_LED>
		Set_LED(9, 0, 0, 0);
 80012ec:	2300      	movs	r3, #0
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2009      	movs	r0, #9
 80012f4:	f000 f9da 	bl	80016ac <Set_LED>
 80012f8:	e193      	b.n	8001622 <LEDHandler+0x566>
	} else if (Value >= 41 && Value < 50) {
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b28      	cmp	r3, #40	; 0x28
 80012fe:	dd3f      	ble.n	8001380 <LEDHandler+0x2c4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b31      	cmp	r3, #49	; 0x31
 8001304:	dc3c      	bgt.n	8001380 <LEDHandler+0x2c4>
		Set_LED(0, 255, 0, 0);
 8001306:	2300      	movs	r3, #0
 8001308:	2200      	movs	r2, #0
 800130a:	21ff      	movs	r1, #255	; 0xff
 800130c:	2000      	movs	r0, #0
 800130e:	f000 f9cd 	bl	80016ac <Set_LED>
		Set_LED(1, 255, 0, 0);
 8001312:	2300      	movs	r3, #0
 8001314:	2200      	movs	r2, #0
 8001316:	21ff      	movs	r1, #255	; 0xff
 8001318:	2001      	movs	r0, #1
 800131a:	f000 f9c7 	bl	80016ac <Set_LED>
		Set_LED(2, 255, 0, 0);
 800131e:	2300      	movs	r3, #0
 8001320:	2200      	movs	r2, #0
 8001322:	21ff      	movs	r1, #255	; 0xff
 8001324:	2002      	movs	r0, #2
 8001326:	f000 f9c1 	bl	80016ac <Set_LED>
		Set_LED(3, 255, 0, 0);
 800132a:	2300      	movs	r3, #0
 800132c:	2200      	movs	r2, #0
 800132e:	21ff      	movs	r1, #255	; 0xff
 8001330:	2003      	movs	r0, #3
 8001332:	f000 f9bb 	bl	80016ac <Set_LED>
		Set_LED(4, 255, 0, 0);
 8001336:	2300      	movs	r3, #0
 8001338:	2200      	movs	r2, #0
 800133a:	21ff      	movs	r1, #255	; 0xff
 800133c:	2004      	movs	r0, #4
 800133e:	f000 f9b5 	bl	80016ac <Set_LED>
		Set_LED(5, 0, 0, 0);
 8001342:	2300      	movs	r3, #0
 8001344:	2200      	movs	r2, #0
 8001346:	2100      	movs	r1, #0
 8001348:	2005      	movs	r0, #5
 800134a:	f000 f9af 	bl	80016ac <Set_LED>
		Set_LED(6, 0, 0, 0);
 800134e:	2300      	movs	r3, #0
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2006      	movs	r0, #6
 8001356:	f000 f9a9 	bl	80016ac <Set_LED>
		Set_LED(7, 0, 0, 0);
 800135a:	2300      	movs	r3, #0
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	2007      	movs	r0, #7
 8001362:	f000 f9a3 	bl	80016ac <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001366:	2300      	movs	r3, #0
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	2008      	movs	r0, #8
 800136e:	f000 f99d 	bl	80016ac <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001372:	2300      	movs	r3, #0
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2009      	movs	r0, #9
 800137a:	f000 f997 	bl	80016ac <Set_LED>
 800137e:	e150      	b.n	8001622 <LEDHandler+0x566>
	} else if (Value >= 51 && Value < 60) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b32      	cmp	r3, #50	; 0x32
 8001384:	dd42      	ble.n	800140c <LEDHandler+0x350>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b3b      	cmp	r3, #59	; 0x3b
 800138a:	dc3f      	bgt.n	800140c <LEDHandler+0x350>
		Set_LED(0, 255, 0, 0);
 800138c:	2300      	movs	r3, #0
 800138e:	2200      	movs	r2, #0
 8001390:	21ff      	movs	r1, #255	; 0xff
 8001392:	2000      	movs	r0, #0
 8001394:	f000 f98a 	bl	80016ac <Set_LED>
		Set_LED(1, 255, 0, 0);
 8001398:	2300      	movs	r3, #0
 800139a:	2200      	movs	r2, #0
 800139c:	21ff      	movs	r1, #255	; 0xff
 800139e:	2001      	movs	r0, #1
 80013a0:	f000 f984 	bl	80016ac <Set_LED>
		Set_LED(2, 255, 0, 0);
 80013a4:	2300      	movs	r3, #0
 80013a6:	2200      	movs	r2, #0
 80013a8:	21ff      	movs	r1, #255	; 0xff
 80013aa:	2002      	movs	r0, #2
 80013ac:	f000 f97e 	bl	80016ac <Set_LED>
		Set_LED(3, 255, 0, 0);
 80013b0:	2300      	movs	r3, #0
 80013b2:	2200      	movs	r2, #0
 80013b4:	21ff      	movs	r1, #255	; 0xff
 80013b6:	2003      	movs	r0, #3
 80013b8:	f000 f978 	bl	80016ac <Set_LED>
		Set_LED(4, 255, 0, 0);
 80013bc:	2300      	movs	r3, #0
 80013be:	2200      	movs	r2, #0
 80013c0:	21ff      	movs	r1, #255	; 0xff
 80013c2:	2004      	movs	r0, #4
 80013c4:	f000 f972 	bl	80016ac <Set_LED>
		Set_LED(5, 255, 0, 0);
 80013c8:	2300      	movs	r3, #0
 80013ca:	2200      	movs	r2, #0
 80013cc:	21ff      	movs	r1, #255	; 0xff
 80013ce:	2005      	movs	r0, #5
 80013d0:	f000 f96c 	bl	80016ac <Set_LED>
		Set_LED(6, 0, 0, 0);
 80013d4:	2300      	movs	r3, #0
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2006      	movs	r0, #6
 80013dc:	f000 f966 	bl	80016ac <Set_LED>
		Set_LED(7, 0, 0, 0);
 80013e0:	2300      	movs	r3, #0
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2007      	movs	r0, #7
 80013e8:	f000 f960 	bl	80016ac <Set_LED>
		Set_LED(8, 0, 0, 0);
 80013ec:	2300      	movs	r3, #0
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2008      	movs	r0, #8
 80013f4:	f000 f95a 	bl	80016ac <Set_LED>
		Set_LED(9, 0, 0, 0);
 80013f8:	2300      	movs	r3, #0
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2009      	movs	r0, #9
 8001400:	f000 f954 	bl	80016ac <Set_LED>
 8001404:	e10d      	b.n	8001622 <LEDHandler+0x566>
 8001406:	bf00      	nop
 8001408:	51eb851f 	.word	0x51eb851f
	} else if (Value >= 61 && Value < 70) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b3c      	cmp	r3, #60	; 0x3c
 8001410:	dd3f      	ble.n	8001492 <LEDHandler+0x3d6>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b45      	cmp	r3, #69	; 0x45
 8001416:	dc3c      	bgt.n	8001492 <LEDHandler+0x3d6>
		Set_LED(0, 255, 0, 0);
 8001418:	2300      	movs	r3, #0
 800141a:	2200      	movs	r2, #0
 800141c:	21ff      	movs	r1, #255	; 0xff
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f944 	bl	80016ac <Set_LED>
		Set_LED(1, 255, 0, 0);
 8001424:	2300      	movs	r3, #0
 8001426:	2200      	movs	r2, #0
 8001428:	21ff      	movs	r1, #255	; 0xff
 800142a:	2001      	movs	r0, #1
 800142c:	f000 f93e 	bl	80016ac <Set_LED>
		Set_LED(2, 255, 0, 0);
 8001430:	2300      	movs	r3, #0
 8001432:	2200      	movs	r2, #0
 8001434:	21ff      	movs	r1, #255	; 0xff
 8001436:	2002      	movs	r0, #2
 8001438:	f000 f938 	bl	80016ac <Set_LED>
		Set_LED(3, 255, 0, 0);
 800143c:	2300      	movs	r3, #0
 800143e:	2200      	movs	r2, #0
 8001440:	21ff      	movs	r1, #255	; 0xff
 8001442:	2003      	movs	r0, #3
 8001444:	f000 f932 	bl	80016ac <Set_LED>
		Set_LED(4, 255, 0, 0);
 8001448:	2300      	movs	r3, #0
 800144a:	2200      	movs	r2, #0
 800144c:	21ff      	movs	r1, #255	; 0xff
 800144e:	2004      	movs	r0, #4
 8001450:	f000 f92c 	bl	80016ac <Set_LED>
		Set_LED(5, 255, 0, 0);
 8001454:	2300      	movs	r3, #0
 8001456:	2200      	movs	r2, #0
 8001458:	21ff      	movs	r1, #255	; 0xff
 800145a:	2005      	movs	r0, #5
 800145c:	f000 f926 	bl	80016ac <Set_LED>
		Set_LED(6, 255, 0, 0);
 8001460:	2300      	movs	r3, #0
 8001462:	2200      	movs	r2, #0
 8001464:	21ff      	movs	r1, #255	; 0xff
 8001466:	2006      	movs	r0, #6
 8001468:	f000 f920 	bl	80016ac <Set_LED>
		Set_LED(7, 0, 0, 0);
 800146c:	2300      	movs	r3, #0
 800146e:	2200      	movs	r2, #0
 8001470:	2100      	movs	r1, #0
 8001472:	2007      	movs	r0, #7
 8001474:	f000 f91a 	bl	80016ac <Set_LED>
		Set_LED(8, 0, 0, 0);
 8001478:	2300      	movs	r3, #0
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2008      	movs	r0, #8
 8001480:	f000 f914 	bl	80016ac <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001484:	2300      	movs	r3, #0
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	2009      	movs	r0, #9
 800148c:	f000 f90e 	bl	80016ac <Set_LED>
 8001490:	e0c7      	b.n	8001622 <LEDHandler+0x566>
	} else if (Value >= 71 && Value < 80) {
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b46      	cmp	r3, #70	; 0x46
 8001496:	dd3f      	ble.n	8001518 <LEDHandler+0x45c>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b4f      	cmp	r3, #79	; 0x4f
 800149c:	dc3c      	bgt.n	8001518 <LEDHandler+0x45c>
		Set_LED(0, 255, 0, 0);
 800149e:	2300      	movs	r3, #0
 80014a0:	2200      	movs	r2, #0
 80014a2:	21ff      	movs	r1, #255	; 0xff
 80014a4:	2000      	movs	r0, #0
 80014a6:	f000 f901 	bl	80016ac <Set_LED>
		Set_LED(1, 255, 0, 0);
 80014aa:	2300      	movs	r3, #0
 80014ac:	2200      	movs	r2, #0
 80014ae:	21ff      	movs	r1, #255	; 0xff
 80014b0:	2001      	movs	r0, #1
 80014b2:	f000 f8fb 	bl	80016ac <Set_LED>
		Set_LED(2, 255, 0, 0);
 80014b6:	2300      	movs	r3, #0
 80014b8:	2200      	movs	r2, #0
 80014ba:	21ff      	movs	r1, #255	; 0xff
 80014bc:	2002      	movs	r0, #2
 80014be:	f000 f8f5 	bl	80016ac <Set_LED>
		Set_LED(3, 255, 0, 0);
 80014c2:	2300      	movs	r3, #0
 80014c4:	2200      	movs	r2, #0
 80014c6:	21ff      	movs	r1, #255	; 0xff
 80014c8:	2003      	movs	r0, #3
 80014ca:	f000 f8ef 	bl	80016ac <Set_LED>
		Set_LED(4, 255, 0, 0);
 80014ce:	2300      	movs	r3, #0
 80014d0:	2200      	movs	r2, #0
 80014d2:	21ff      	movs	r1, #255	; 0xff
 80014d4:	2004      	movs	r0, #4
 80014d6:	f000 f8e9 	bl	80016ac <Set_LED>
		Set_LED(5, 255, 0, 0);
 80014da:	2300      	movs	r3, #0
 80014dc:	2200      	movs	r2, #0
 80014de:	21ff      	movs	r1, #255	; 0xff
 80014e0:	2005      	movs	r0, #5
 80014e2:	f000 f8e3 	bl	80016ac <Set_LED>
		Set_LED(6, 255, 0, 0);
 80014e6:	2300      	movs	r3, #0
 80014e8:	2200      	movs	r2, #0
 80014ea:	21ff      	movs	r1, #255	; 0xff
 80014ec:	2006      	movs	r0, #6
 80014ee:	f000 f8dd 	bl	80016ac <Set_LED>
		Set_LED(7, 255, 0, 0);
 80014f2:	2300      	movs	r3, #0
 80014f4:	2200      	movs	r2, #0
 80014f6:	21ff      	movs	r1, #255	; 0xff
 80014f8:	2007      	movs	r0, #7
 80014fa:	f000 f8d7 	bl	80016ac <Set_LED>
		Set_LED(8, 0, 0, 0);
 80014fe:	2300      	movs	r3, #0
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2008      	movs	r0, #8
 8001506:	f000 f8d1 	bl	80016ac <Set_LED>
		Set_LED(9, 0, 0, 0);
 800150a:	2300      	movs	r3, #0
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	2009      	movs	r0, #9
 8001512:	f000 f8cb 	bl	80016ac <Set_LED>
 8001516:	e084      	b.n	8001622 <LEDHandler+0x566>
	} else if (Value >= 81 && Value < 90) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b50      	cmp	r3, #80	; 0x50
 800151c:	dd3f      	ble.n	800159e <LEDHandler+0x4e2>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b59      	cmp	r3, #89	; 0x59
 8001522:	dc3c      	bgt.n	800159e <LEDHandler+0x4e2>
		Set_LED(0, 255, 0, 0);
 8001524:	2300      	movs	r3, #0
 8001526:	2200      	movs	r2, #0
 8001528:	21ff      	movs	r1, #255	; 0xff
 800152a:	2000      	movs	r0, #0
 800152c:	f000 f8be 	bl	80016ac <Set_LED>
		Set_LED(1, 255, 0, 0);
 8001530:	2300      	movs	r3, #0
 8001532:	2200      	movs	r2, #0
 8001534:	21ff      	movs	r1, #255	; 0xff
 8001536:	2001      	movs	r0, #1
 8001538:	f000 f8b8 	bl	80016ac <Set_LED>
		Set_LED(2, 255, 0, 0);
 800153c:	2300      	movs	r3, #0
 800153e:	2200      	movs	r2, #0
 8001540:	21ff      	movs	r1, #255	; 0xff
 8001542:	2002      	movs	r0, #2
 8001544:	f000 f8b2 	bl	80016ac <Set_LED>
		Set_LED(3, 255, 0, 0);
 8001548:	2300      	movs	r3, #0
 800154a:	2200      	movs	r2, #0
 800154c:	21ff      	movs	r1, #255	; 0xff
 800154e:	2003      	movs	r0, #3
 8001550:	f000 f8ac 	bl	80016ac <Set_LED>
		Set_LED(4, 255, 0, 0);
 8001554:	2300      	movs	r3, #0
 8001556:	2200      	movs	r2, #0
 8001558:	21ff      	movs	r1, #255	; 0xff
 800155a:	2004      	movs	r0, #4
 800155c:	f000 f8a6 	bl	80016ac <Set_LED>
		Set_LED(5, 255, 0, 0);
 8001560:	2300      	movs	r3, #0
 8001562:	2200      	movs	r2, #0
 8001564:	21ff      	movs	r1, #255	; 0xff
 8001566:	2005      	movs	r0, #5
 8001568:	f000 f8a0 	bl	80016ac <Set_LED>
		Set_LED(6, 255, 0, 0);
 800156c:	2300      	movs	r3, #0
 800156e:	2200      	movs	r2, #0
 8001570:	21ff      	movs	r1, #255	; 0xff
 8001572:	2006      	movs	r0, #6
 8001574:	f000 f89a 	bl	80016ac <Set_LED>
		Set_LED(7, 255, 0, 0);
 8001578:	2300      	movs	r3, #0
 800157a:	2200      	movs	r2, #0
 800157c:	21ff      	movs	r1, #255	; 0xff
 800157e:	2007      	movs	r0, #7
 8001580:	f000 f894 	bl	80016ac <Set_LED>
		Set_LED(8, 255, 0, 0);
 8001584:	2300      	movs	r3, #0
 8001586:	2200      	movs	r2, #0
 8001588:	21ff      	movs	r1, #255	; 0xff
 800158a:	2008      	movs	r0, #8
 800158c:	f000 f88e 	bl	80016ac <Set_LED>
		Set_LED(9, 0, 0, 0);
 8001590:	2300      	movs	r3, #0
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2009      	movs	r0, #9
 8001598:	f000 f888 	bl	80016ac <Set_LED>
 800159c:	e041      	b.n	8001622 <LEDHandler+0x566>
	} else if (Value >= 91 && Value < 100) {
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b5a      	cmp	r3, #90	; 0x5a
 80015a2:	dd3e      	ble.n	8001622 <LEDHandler+0x566>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b63      	cmp	r3, #99	; 0x63
 80015a8:	dc3b      	bgt.n	8001622 <LEDHandler+0x566>
		Set_LED(0, 255, 0, 0);
 80015aa:	2300      	movs	r3, #0
 80015ac:	2200      	movs	r2, #0
 80015ae:	21ff      	movs	r1, #255	; 0xff
 80015b0:	2000      	movs	r0, #0
 80015b2:	f000 f87b 	bl	80016ac <Set_LED>
		Set_LED(1, 255, 0, 0);
 80015b6:	2300      	movs	r3, #0
 80015b8:	2200      	movs	r2, #0
 80015ba:	21ff      	movs	r1, #255	; 0xff
 80015bc:	2001      	movs	r0, #1
 80015be:	f000 f875 	bl	80016ac <Set_LED>
		Set_LED(2, 255, 0, 0);
 80015c2:	2300      	movs	r3, #0
 80015c4:	2200      	movs	r2, #0
 80015c6:	21ff      	movs	r1, #255	; 0xff
 80015c8:	2002      	movs	r0, #2
 80015ca:	f000 f86f 	bl	80016ac <Set_LED>
		Set_LED(3, 255, 0, 0);
 80015ce:	2300      	movs	r3, #0
 80015d0:	2200      	movs	r2, #0
 80015d2:	21ff      	movs	r1, #255	; 0xff
 80015d4:	2003      	movs	r0, #3
 80015d6:	f000 f869 	bl	80016ac <Set_LED>
		Set_LED(4, 255, 0, 0);
 80015da:	2300      	movs	r3, #0
 80015dc:	2200      	movs	r2, #0
 80015de:	21ff      	movs	r1, #255	; 0xff
 80015e0:	2004      	movs	r0, #4
 80015e2:	f000 f863 	bl	80016ac <Set_LED>
		Set_LED(5, 255, 0, 0);
 80015e6:	2300      	movs	r3, #0
 80015e8:	2200      	movs	r2, #0
 80015ea:	21ff      	movs	r1, #255	; 0xff
 80015ec:	2005      	movs	r0, #5
 80015ee:	f000 f85d 	bl	80016ac <Set_LED>
		Set_LED(6, 255, 0, 0);
 80015f2:	2300      	movs	r3, #0
 80015f4:	2200      	movs	r2, #0
 80015f6:	21ff      	movs	r1, #255	; 0xff
 80015f8:	2006      	movs	r0, #6
 80015fa:	f000 f857 	bl	80016ac <Set_LED>
		Set_LED(7, 255, 0, 0);
 80015fe:	2300      	movs	r3, #0
 8001600:	2200      	movs	r2, #0
 8001602:	21ff      	movs	r1, #255	; 0xff
 8001604:	2007      	movs	r0, #7
 8001606:	f000 f851 	bl	80016ac <Set_LED>
		Set_LED(8, 255, 0, 0);
 800160a:	2300      	movs	r3, #0
 800160c:	2200      	movs	r2, #0
 800160e:	21ff      	movs	r1, #255	; 0xff
 8001610:	2008      	movs	r0, #8
 8001612:	f000 f84b 	bl	80016ac <Set_LED>
		Set_LED(9, 255, 0, 0);
 8001616:	2300      	movs	r3, #0
 8001618:	2200      	movs	r2, #0
 800161a:	21ff      	movs	r1, #255	; 0xff
 800161c:	2009      	movs	r0, #9
 800161e:	f000 f845 	bl	80016ac <Set_LED>
	}

	Set_Brightness(brilho);
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f000 f870 	bl	8001708 <Set_Brightness>
	WS2512_Send();
 8001628:	f000 f8ec 	bl	8001804 <WS2512_Send>
	HAL_Delay(50);
 800162c:	2032      	movs	r0, #50	; 0x32
 800162e:	f000 faf9 	bl	8001c24 <HAL_Delay>
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop

0800163c <AnalogHandler>:
/**
 * @brief  Essa função executa a conversão do valor em bits da leitura analógica 1 para um range de 0 a 100%.
 * @param	Value 	inteiro de 0 a 4095 representa o valor em bits da leitura analógica do ADC1.
 * @retval Value	inteiro de 0 a 100
 */
int AnalogHandler(int Value) {
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

	Value = Value * 100 / 4095;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2264      	movs	r2, #100	; 0x64
 8001648:	fb02 f303 	mul.w	r3, r2, r3
 800164c:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <AnalogHandler+0x44>)
 800164e:	fb82 1203 	smull	r1, r2, r2, r3
 8001652:	441a      	add	r2, r3
 8001654:	12d2      	asrs	r2, r2, #11
 8001656:	17db      	asrs	r3, r3, #31
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	607b      	str	r3, [r7, #4]

	if (Value > 100) {
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b64      	cmp	r3, #100	; 0x64
 8001660:	dd02      	ble.n	8001668 <AnalogHandler+0x2c>
		Value = 100;
 8001662:	2364      	movs	r3, #100	; 0x64
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	e004      	b.n	8001672 <AnalogHandler+0x36>
	} else if (Value < 0) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	da01      	bge.n	8001672 <AnalogHandler+0x36>
		Value = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
	}
	return Value;
 8001672:	687b      	ldr	r3, [r7, #4]
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	80080081 	.word	0x80080081

08001684 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 800168c:	2100      	movs	r1, #0
 800168e:	4805      	ldr	r0, [pc, #20]	; (80016a4 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001690:	f002 fbc2 	bl	8003e18 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000058 	.word	0x20000058
 80016a8:	2000018c 	.word	0x2000018c

080016ac <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
 80016b8:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	b2d9      	uxtb	r1, r3
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <Set_LED+0x54>)
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	b2d9      	uxtb	r1, r3
 80016ca:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <Set_LED+0x54>)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	460a      	mov	r2, r1
 80016d4:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	b2d9      	uxtb	r1, r3
 80016da:	4a09      	ldr	r2, [pc, #36]	; (8001700 <Set_LED+0x54>)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4413      	add	r3, r2
 80016e2:	460a      	mov	r2, r1
 80016e4:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2d9      	uxtb	r1, r3
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <Set_LED+0x54>)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	460a      	mov	r2, r1
 80016f4:	70da      	strb	r2, [r3, #3]
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	200000e8 	.word	0x200000e8
 8001704:	00000000 	.word	0x00000000

08001708 <Set_Brightness>:

#define PI 3.14159265

void Set_Brightness (int brightness) // 0~45 linearização do brilho
{
 8001708:	b5b0      	push	{r4, r5, r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
#if USE_BRIGHTNESS

	if(brightness > 45) brightness = 45;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b2d      	cmp	r3, #45	; 0x2d
 8001714:	dd01      	ble.n	800171a <Set_Brightness+0x12>
 8001716:	232d      	movs	r3, #45	; 0x2d
 8001718:	607b      	str	r3, [r7, #4]
	for(int i=0; i<MAX_LED;i++)
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	e05f      	b.n	80017e0 <Set_Brightness+0xd8>
	{
		LED_Mod[i][0] = LED_Data[i][0];
 8001720:	4a35      	ldr	r2, [pc, #212]	; (80017f8 <Set_Brightness+0xf0>)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	f812 1023 	ldrb.w	r1, [r2, r3, lsl #2]
 8001728:	4a34      	ldr	r2, [pc, #208]	; (80017fc <Set_Brightness+0xf4>)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		for (int j=1;j<4;j++)
 8001730:	2301      	movs	r3, #1
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	e04e      	b.n	80017d4 <Set_Brightness+0xcc>
		{
			float angle = 90-brightness; // em graus
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff faaf 	bl	8000ca0 <__aeabi_i2f>
 8001742:	4603      	mov	r3, r0
 8001744:	60fb      	str	r3, [r7, #12]
			angle = angle*PI / 180; //em radianos
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f7fe fe66 	bl	8000418 <__aeabi_f2d>
 800174c:	a328      	add	r3, pc, #160	; (adr r3, 80017f0 <Set_Brightness+0xe8>)
 800174e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001752:	f7fe feb9 	bl	80004c8 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b27      	ldr	r3, [pc, #156]	; (8001800 <Set_Brightness+0xf8>)
 8001764:	f7fe ffda 	bl	800071c <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4610      	mov	r0, r2
 800176e:	4619      	mov	r1, r3
 8001770:	f7ff f98c 	bl	8000a8c <__aeabi_d2f>
 8001774:	4603      	mov	r3, r0
 8001776:	60fb      	str	r3, [r7, #12]
			LED_Mod[i][j] = (LED_Data[i][j])/(tan(angle));
 8001778:	4a1f      	ldr	r2, [pc, #124]	; (80017f8 <Set_Brightness+0xf0>)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	441a      	add	r2, r3
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4413      	add	r3, r2
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fe34 	bl	80003f4 <__aeabi_i2d>
 800178c:	4604      	mov	r4, r0
 800178e:	460d      	mov	r5, r1
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f7fe fe41 	bl	8000418 <__aeabi_f2d>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f003 f9ed 	bl	8004b7c <tan>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4620      	mov	r0, r4
 80017a8:	4629      	mov	r1, r5
 80017aa:	f7fe ffb7 	bl	800071c <__aeabi_ddiv>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7ff f949 	bl	8000a4c <__aeabi_d2uiz>
 80017ba:	4603      	mov	r3, r0
 80017bc:	b2d9      	uxtb	r1, r3
 80017be:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <Set_Brightness+0xf4>)
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	441a      	add	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4413      	add	r3, r2
 80017ca:	460a      	mov	r2, r1
 80017cc:	701a      	strb	r2, [r3, #0]
		for (int j=1;j<4;j++)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	3301      	adds	r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	ddad      	ble.n	8001736 <Set_Brightness+0x2e>
	for(int i=0; i<MAX_LED;i++)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	3301      	adds	r3, #1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b13      	cmp	r3, #19
 80017e4:	dd9c      	ble.n	8001720 <Set_Brightness+0x18>
		}

	}
}
 80017e6:	bf00      	nop
 80017e8:	bf00      	nop
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bdb0      	pop	{r4, r5, r7, pc}
 80017f0:	53c8d4f1 	.word	0x53c8d4f1
 80017f4:	400921fb 	.word	0x400921fb
 80017f8:	200000e8 	.word	0x200000e8
 80017fc:	20000138 	.word	0x20000138
 8001800:	40668000 	.word	0x40668000

08001804 <WS2512_Send>:
#endif

uint16_t pwmData[(24*MAX_LED+50)];

void WS2512_Send (void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
//	{
//		pwmData[indx] = 0;
//		indx++;
//	}

	for (int i=0;i<MAX_LED;i++)
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	e036      	b.n	8001882 <WS2512_Send+0x7e>
	{
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
 8001814:	4a2e      	ldr	r2, [pc, #184]	; (80018d0 <WS2512_Send+0xcc>)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	785b      	ldrb	r3, [r3, #1]
 800181e:	041a      	lsls	r2, r3, #16
 8001820:	492b      	ldr	r1, [pc, #172]	; (80018d0 <WS2512_Send+0xcc>)
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	789b      	ldrb	r3, [r3, #2]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	431a      	orrs	r2, r3
 800182e:	4928      	ldr	r1, [pc, #160]	; (80018d0 <WS2512_Send+0xcc>)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	78db      	ldrb	r3, [r3, #3]
 8001838:	4313      	orrs	r3, r2
 800183a:	607b      	str	r3, [r7, #4]

		for (int i=23; i>=0; i--)
 800183c:	2317      	movs	r3, #23
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	e019      	b.n	8001876 <WS2512_Send+0x72>
		{
			if (color&(1<<i))
 8001842:	2201      	movs	r2, #1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	461a      	mov	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <WS2512_Send+0x5c>
			{
				pwmData[indx] = 60;		// pulso alto, 2/3 de 90, aprox 68%
 8001854:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <WS2512_Send+0xd0>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	213c      	movs	r1, #60	; 0x3c
 800185a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800185e:	e004      	b.n	800186a <WS2512_Send+0x66>
			}

			else pwmData[indx] = 30;	// pulso baixo, 1/3 de 90, aprox 32%
 8001860:	4a1c      	ldr	r2, [pc, #112]	; (80018d4 <WS2512_Send+0xd0>)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	211e      	movs	r1, #30
 8001866:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3b01      	subs	r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	dae2      	bge.n	8001842 <WS2512_Send+0x3e>
	for (int i=0;i<MAX_LED;i++)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	3301      	adds	r3, #1
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2b13      	cmp	r3, #19
 8001886:	ddc5      	ble.n	8001814 <WS2512_Send+0x10>
		}
	}

	for(int i=0;i<50;i++)				//intervalor de tempo de 50us antes da próxima msg
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	e00a      	b.n	80018a4 <WS2512_Send+0xa0>
	{
		pwmData[indx] = 0;
 800188e:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <WS2512_Send+0xd0>)
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	2100      	movs	r1, #0
 8001894:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3301      	adds	r3, #1
 800189c:	617b      	str	r3, [r7, #20]
	for(int i=0;i<50;i++)				//intervalor de tempo de 50us antes da próxima msg
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3301      	adds	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b31      	cmp	r3, #49	; 0x31
 80018a8:	ddf1      	ble.n	800188e <WS2512_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <WS2512_Send+0xd0>)
 80018b0:	2100      	movs	r1, #0
 80018b2:	4809      	ldr	r0, [pc, #36]	; (80018d8 <WS2512_Send+0xd4>)
 80018b4:	f002 f90e 	bl	8003ad4 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag){};
 80018b8:	bf00      	nop
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <WS2512_Send+0xd8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0fb      	beq.n	80018ba <WS2512_Send+0xb6>
	datasentflag = 0;
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <WS2512_Send+0xd8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
}
 80018c8:	bf00      	nop
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000138 	.word	0x20000138
 80018d4:	20000190 	.word	0x20000190
 80018d8:	20000058 	.word	0x20000058
 80018dc:	2000018c 	.word	0x2000018c

080018e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e4:	b672      	cpsid	i
}
 80018e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <Error_Handler+0x8>
	...

080018ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_MspInit+0x40>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	4a0d      	ldr	r2, [pc, #52]	; (800192c <HAL_MspInit+0x40>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6193      	str	r3, [r2, #24]
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_MspInit+0x40>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_MspInit+0x40>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_MspInit+0x40>)
 8001910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001914:	61d3      	str	r3, [r2, #28]
 8001916:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_MspInit+0x40>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0310 	add.w	r3, r7, #16
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_ADC_MspInit+0x6c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d121      	bne.n	8001994 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001950:	4b13      	ldr	r3, [pc, #76]	; (80019a0 <HAL_ADC_MspInit+0x70>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <HAL_ADC_MspInit+0x70>)
 8001956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_ADC_MspInit+0x70>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_ADC_MspInit+0x70>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <HAL_ADC_MspInit+0x70>)
 800196e:	f043 0308 	orr.w	r3, r3, #8
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_ADC_MspInit+0x70>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001980:	2302      	movs	r3, #2
 8001982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001984:	2303      	movs	r3, #3
 8001986:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	4619      	mov	r1, r3
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_ADC_MspInit+0x74>)
 8001990:	f001 f90c 	bl	8002bac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40012400 	.word	0x40012400
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010c00 	.word	0x40010c00

080019a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_TIM_Base_MspInit+0x84>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d133      	bne.n	8001a22 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_TIM_Base_MspInit+0x88>)
 80019bc:	699b      	ldr	r3, [r3, #24]
 80019be:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <HAL_TIM_Base_MspInit+0x88>)
 80019c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019c4:	6193      	str	r3, [r2, #24]
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_TIM_Base_MspInit+0x88>)
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_TIM_Base_MspInit+0x8c>)
 80019d4:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <HAL_TIM_Base_MspInit+0x90>)
 80019d6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <HAL_TIM_Base_MspInit+0x8c>)
 80019da:	2210      	movs	r2, #16
 80019dc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_TIM_Base_MspInit+0x8c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_TIM_Base_MspInit+0x8c>)
 80019e6:	2280      	movs	r2, #128	; 0x80
 80019e8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019ea:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <HAL_TIM_Base_MspInit+0x8c>)
 80019ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019f0:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_TIM_Base_MspInit+0x8c>)
 80019f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f8:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_TIM_Base_MspInit+0x8c>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_TIM_Base_MspInit+0x8c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001a06:	480b      	ldr	r0, [pc, #44]	; (8001a34 <HAL_TIM_Base_MspInit+0x8c>)
 8001a08:	f000 fe6a 	bl	80026e0 <HAL_DMA_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8001a12:	f7ff ff65 	bl	80018e0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <HAL_TIM_Base_MspInit+0x8c>)
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
 8001a1c:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <HAL_TIM_Base_MspInit+0x8c>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40021000 	.word	0x40021000
 8001a34:	200000a0 	.word	0x200000a0
 8001a38:	4002001c 	.word	0x4002001c

08001a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a10      	ldr	r2, [pc, #64]	; (8001a98 <HAL_TIM_MspPostInit+0x5c>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d118      	bne.n	8001a8e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <HAL_TIM_MspPostInit+0x60>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a0e      	ldr	r2, [pc, #56]	; (8001a9c <HAL_TIM_MspPostInit+0x60>)
 8001a62:	f043 0304 	orr.w	r3, r3, #4
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_TIM_MspPostInit+0x60>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 0310 	add.w	r3, r7, #16
 8001a86:	4619      	mov	r1, r3
 8001a88:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <HAL_TIM_MspPostInit+0x64>)
 8001a8a:	f001 f88f 	bl	8002bac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a8e:	bf00      	nop
 8001a90:	3720      	adds	r7, #32
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010800 	.word	0x40010800

08001aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <NMI_Handler+0x4>

08001aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aae:	e7fe      	b.n	8001aae <HardFault_Handler+0x4>

08001ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <MemManage_Handler+0x4>

08001ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <BusFault_Handler+0x4>

08001abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <UsageFault_Handler+0x4>

08001ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr

08001ae6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aea:	f000 f87f 	bl	8001bec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <DMA1_Channel2_IRQHandler+0x10>)
 8001afa:	f000 ff23 	bl	8002944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	200000a0 	.word	0x200000a0

08001b08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b14:	f7ff fff8 	bl	8001b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b18:	480b      	ldr	r0, [pc, #44]	; (8001b48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b1a:	490c      	ldr	r1, [pc, #48]	; (8001b4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b30:	4c09      	ldr	r4, [pc, #36]	; (8001b58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f002 fff9 	bl	8004b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b42:	f7ff f901 	bl	8000d48 <main>
  bx lr
 8001b46:	4770      	bx	lr
  ldr r0, =_sdata
 8001b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b50:	08005e68 	.word	0x08005e68
  ldr r2, =_sbss
 8001b54:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b58:	200005b8 	.word	0x200005b8

08001b5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC1_2_IRQHandler>
	...

08001b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_Init+0x28>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_Init+0x28>)
 8001b6a:	f043 0310 	orr.w	r3, r3, #16
 8001b6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b70:	2003      	movs	r0, #3
 8001b72:	f000 fd73 	bl	800265c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b76:	200f      	movs	r0, #15
 8001b78:	f000 f808 	bl	8001b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7c:	f7ff feb6 	bl	80018ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40022000 	.word	0x40022000

08001b8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b94:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_InitTick+0x54>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b12      	ldr	r3, [pc, #72]	; (8001be4 <HAL_InitTick+0x58>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ba2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fd8b 	bl	80026c6 <HAL_SYSTICK_Config>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00e      	b.n	8001bd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b0f      	cmp	r3, #15
 8001bbe:	d80a      	bhi.n	8001bd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f000 fd53 	bl	8002672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bcc:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <HAL_InitTick+0x5c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	e000      	b.n	8001bd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20000000 	.word	0x20000000
 8001be4:	20000008 	.word	0x20000008
 8001be8:	20000004 	.word	0x20000004

08001bec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf0:	4b05      	ldr	r3, [pc, #20]	; (8001c08 <HAL_IncTick+0x1c>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <HAL_IncTick+0x20>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	4a03      	ldr	r2, [pc, #12]	; (8001c0c <HAL_IncTick+0x20>)
 8001bfe:	6013      	str	r3, [r2, #0]
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	200005b4 	.word	0x200005b4

08001c10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return uwTick;
 8001c14:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <HAL_GetTick+0x10>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	200005b4 	.word	0x200005b4

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff fff0 	bl	8001c10 <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffe0 	bl	8001c10 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008

08001c6c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0be      	b.n	8001e0c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d109      	bne.n	8001cb0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fe40 	bl	8001930 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fbc5 	bl	8002440 <ADC_ConversionStop_Disable>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 8099 	bne.w	8001dfa <HAL_ADC_Init+0x18e>
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 8095 	bne.w	8001dfa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cd8:	f023 0302 	bic.w	r3, r3, #2
 8001cdc:	f043 0202 	orr.w	r2, r3, #2
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cec:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7b1b      	ldrb	r3, [r3, #12]
 8001cf2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cf4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d04:	d003      	beq.n	8001d0e <HAL_ADC_Init+0xa2>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d102      	bne.n	8001d14 <HAL_ADC_Init+0xa8>
 8001d0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d12:	e000      	b.n	8001d16 <HAL_ADC_Init+0xaa>
 8001d14:	2300      	movs	r3, #0
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	7d1b      	ldrb	r3, [r3, #20]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d119      	bne.n	8001d58 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7b1b      	ldrb	r3, [r3, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	035a      	lsls	r2, r3, #13
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	e00b      	b.n	8001d58 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d44:	f043 0220 	orr.w	r2, r3, #32
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d50:	f043 0201 	orr.w	r2, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	4b28      	ldr	r3, [pc, #160]	; (8001e14 <HAL_ADC_Init+0x1a8>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d88:	d003      	beq.n	8001d92 <HAL_ADC_Init+0x126>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d104      	bne.n	8001d9c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	051b      	lsls	r3, r3, #20
 8001d9a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <HAL_ADC_Init+0x1ac>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dca:	f023 0303 	bic.w	r3, r3, #3
 8001dce:	f043 0201 	orr.w	r2, r3, #1
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dd6:	e018      	b.n	8001e0a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	f023 0312 	bic.w	r3, r3, #18
 8001de0:	f043 0210 	orr.w	r2, r3, #16
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001df8:	e007      	b.n	8001e0a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfe:	f043 0210 	orr.w	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	ffe1f7fd 	.word	0xffe1f7fd
 8001e18:	ff1f0efe 	.word	0xff1f0efe

08001e1c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d101      	bne.n	8001e36 <HAL_ADC_Start+0x1a>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e098      	b.n	8001f68 <HAL_ADC_Start+0x14c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 faa4 	bl	800238c <ADC_Enable>
 8001e44:	4603      	mov	r3, r0
 8001e46:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 8087 	bne.w	8001f5e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a41      	ldr	r2, [pc, #260]	; (8001f70 <HAL_ADC_Start+0x154>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d105      	bne.n	8001e7a <HAL_ADC_Start+0x5e>
 8001e6e:	4b41      	ldr	r3, [pc, #260]	; (8001f74 <HAL_ADC_Start+0x158>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d115      	bne.n	8001ea6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d026      	beq.n	8001ee2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ea4:	e01d      	b.n	8001ee2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eaa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a2f      	ldr	r2, [pc, #188]	; (8001f74 <HAL_ADC_Start+0x158>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d004      	beq.n	8001ec6 <HAL_ADC_Start+0xaa>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <HAL_ADC_Start+0x154>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d10d      	bne.n	8001ee2 <HAL_ADC_Start+0xc6>
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <HAL_ADC_Start+0x158>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d007      	beq.n	8001ee2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d006      	beq.n	8001efc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	f023 0206 	bic.w	r2, r3, #6
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001efa:	e002      	b.n	8001f02 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f06f 0202 	mvn.w	r2, #2
 8001f12:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f1e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f22:	d113      	bne.n	8001f4c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f28:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <HAL_ADC_Start+0x154>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d105      	bne.n	8001f3a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_ADC_Start+0x158>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d108      	bne.n	8001f4c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	e00c      	b.n	8001f66 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	e003      	b.n	8001f66 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40012800 	.word	0x40012800
 8001f74:	40012400 	.word	0x40012400

08001f78 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f8e:	f7ff fe3f 	bl	8001c10 <HAL_GetTick>
 8001f92:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa6:	f043 0220 	orr.w	r2, r3, #32
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0d3      	b.n	8002162 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d131      	bne.n	800202c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d12a      	bne.n	800202c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fd6:	e021      	b.n	800201c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fde:	d01d      	beq.n	800201c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d007      	beq.n	8001ff6 <HAL_ADC_PollForConversion+0x7e>
 8001fe6:	f7ff fe13 	bl	8001c10 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d212      	bcs.n	800201c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	f043 0204 	orr.w	r2, r3, #4
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e0a2      	b.n	8002162 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0d6      	beq.n	8001fd8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800202a:	e070      	b.n	800210e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800202c:	4b4f      	ldr	r3, [pc, #316]	; (800216c <HAL_ADC_PollForConversion+0x1f4>)
 800202e:	681c      	ldr	r4, [r3, #0]
 8002030:	2002      	movs	r0, #2
 8002032:	f001 fbf1 	bl	8003818 <HAL_RCCEx_GetPeriphCLKFreq>
 8002036:	4603      	mov	r3, r0
 8002038:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6919      	ldr	r1, [r3, #16]
 8002042:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <HAL_ADC_PollForConversion+0x1f8>)
 8002044:	400b      	ands	r3, r1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d118      	bne.n	800207c <HAL_ADC_PollForConversion+0x104>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68d9      	ldr	r1, [r3, #12]
 8002050:	4b48      	ldr	r3, [pc, #288]	; (8002174 <HAL_ADC_PollForConversion+0x1fc>)
 8002052:	400b      	ands	r3, r1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d111      	bne.n	800207c <HAL_ADC_PollForConversion+0x104>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6919      	ldr	r1, [r3, #16]
 800205e:	4b46      	ldr	r3, [pc, #280]	; (8002178 <HAL_ADC_PollForConversion+0x200>)
 8002060:	400b      	ands	r3, r1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d108      	bne.n	8002078 <HAL_ADC_PollForConversion+0x100>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68d9      	ldr	r1, [r3, #12]
 800206c:	4b43      	ldr	r3, [pc, #268]	; (800217c <HAL_ADC_PollForConversion+0x204>)
 800206e:	400b      	ands	r3, r1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_ADC_PollForConversion+0x100>
 8002074:	2314      	movs	r3, #20
 8002076:	e020      	b.n	80020ba <HAL_ADC_PollForConversion+0x142>
 8002078:	2329      	movs	r3, #41	; 0x29
 800207a:	e01e      	b.n	80020ba <HAL_ADC_PollForConversion+0x142>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6919      	ldr	r1, [r3, #16]
 8002082:	4b3d      	ldr	r3, [pc, #244]	; (8002178 <HAL_ADC_PollForConversion+0x200>)
 8002084:	400b      	ands	r3, r1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d106      	bne.n	8002098 <HAL_ADC_PollForConversion+0x120>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68d9      	ldr	r1, [r3, #12]
 8002090:	4b3a      	ldr	r3, [pc, #232]	; (800217c <HAL_ADC_PollForConversion+0x204>)
 8002092:	400b      	ands	r3, r1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00d      	beq.n	80020b4 <HAL_ADC_PollForConversion+0x13c>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6919      	ldr	r1, [r3, #16]
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <HAL_ADC_PollForConversion+0x208>)
 80020a0:	400b      	ands	r3, r1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d108      	bne.n	80020b8 <HAL_ADC_PollForConversion+0x140>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68d9      	ldr	r1, [r3, #12]
 80020ac:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_ADC_PollForConversion+0x208>)
 80020ae:	400b      	ands	r3, r1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_PollForConversion+0x140>
 80020b4:	2354      	movs	r3, #84	; 0x54
 80020b6:	e000      	b.n	80020ba <HAL_ADC_PollForConversion+0x142>
 80020b8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020c0:	e021      	b.n	8002106 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c8:	d01a      	beq.n	8002100 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_ADC_PollForConversion+0x168>
 80020d0:	f7ff fd9e 	bl	8001c10 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d20f      	bcs.n	8002100 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d90b      	bls.n	8002100 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	f043 0204 	orr.w	r2, r3, #4
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e030      	b.n	8002162 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3301      	adds	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	429a      	cmp	r2, r3
 800210c:	d8d9      	bhi.n	80020c2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f06f 0212 	mvn.w	r2, #18
 8002116:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800212e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002132:	d115      	bne.n	8002160 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002138:	2b00      	cmp	r3, #0
 800213a:	d111      	bne.n	8002160 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d105      	bne.n	8002160 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	371c      	adds	r7, #28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	bf00      	nop
 800216c:	20000000 	.word	0x20000000
 8002170:	24924924 	.word	0x24924924
 8002174:	00924924 	.word	0x00924924
 8002178:	12492492 	.word	0x12492492
 800217c:	00492492 	.word	0x00492492
 8002180:	00249249 	.word	0x00249249

08002184 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x20>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e0dc      	b.n	8002376 <HAL_ADC_ConfigChannel+0x1da>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d81c      	bhi.n	8002206 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	3b05      	subs	r3, #5
 80021de:	221f      	movs	r2, #31
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	4019      	ands	r1, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	6818      	ldr	r0, [r3, #0]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	3b05      	subs	r3, #5
 80021f8:	fa00 f203 	lsl.w	r2, r0, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	635a      	str	r2, [r3, #52]	; 0x34
 8002204:	e03c      	b.n	8002280 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b0c      	cmp	r3, #12
 800220c:	d81c      	bhi.n	8002248 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	3b23      	subs	r3, #35	; 0x23
 8002220:	221f      	movs	r2, #31
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	4019      	ands	r1, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3b23      	subs	r3, #35	; 0x23
 800223a:	fa00 f203 	lsl.w	r2, r0, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
 8002246:	e01b      	b.n	8002280 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	3b41      	subs	r3, #65	; 0x41
 800225a:	221f      	movs	r2, #31
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	4019      	ands	r1, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	3b41      	subs	r3, #65	; 0x41
 8002274:	fa00 f203 	lsl.w	r2, r0, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b09      	cmp	r3, #9
 8002286:	d91c      	bls.n	80022c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68d9      	ldr	r1, [r3, #12]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	3b1e      	subs	r3, #30
 800229a:	2207      	movs	r2, #7
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	4019      	ands	r1, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6898      	ldr	r0, [r3, #8]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	3b1e      	subs	r3, #30
 80022b4:	fa00 f203 	lsl.w	r2, r0, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	60da      	str	r2, [r3, #12]
 80022c0:	e019      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6919      	ldr	r1, [r3, #16]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	2207      	movs	r2, #7
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	4019      	ands	r1, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	6898      	ldr	r0, [r3, #8]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	fa00 f203 	lsl.w	r2, r0, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d003      	beq.n	8002306 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002302:	2b11      	cmp	r3, #17
 8002304:	d132      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a1d      	ldr	r2, [pc, #116]	; (8002380 <HAL_ADC_ConfigChannel+0x1e4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d125      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d126      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800232c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b10      	cmp	r3, #16
 8002334:	d11a      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_ADC_ConfigChannel+0x1e8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a13      	ldr	r2, [pc, #76]	; (8002388 <HAL_ADC_ConfigChannel+0x1ec>)
 800233c:	fba2 2303 	umull	r2, r3, r2, r3
 8002340:	0c9a      	lsrs	r2, r3, #18
 8002342:	4613      	mov	r3, r2
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800234c:	e002      	b.n	8002354 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	3b01      	subs	r3, #1
 8002352:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f9      	bne.n	800234e <HAL_ADC_ConfigChannel+0x1b2>
 800235a:	e007      	b.n	800236c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	f043 0220 	orr.w	r2, r3, #32
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002374:	7bfb      	ldrb	r3, [r7, #15]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	40012400 	.word	0x40012400
 8002384:	20000000 	.word	0x20000000
 8002388:	431bde83 	.word	0x431bde83

0800238c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d040      	beq.n	800242c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023ba:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <ADC_Enable+0xac>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a1f      	ldr	r2, [pc, #124]	; (800243c <ADC_Enable+0xb0>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	0c9b      	lsrs	r3, r3, #18
 80023c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023c8:	e002      	b.n	80023d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f9      	bne.n	80023ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023d6:	f7ff fc1b 	bl	8001c10 <HAL_GetTick>
 80023da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023dc:	e01f      	b.n	800241e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023de:	f7ff fc17 	bl	8001c10 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d918      	bls.n	800241e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d011      	beq.n	800241e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	f043 0210 	orr.w	r2, r3, #16
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	f043 0201 	orr.w	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e007      	b.n	800242e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d1d8      	bne.n	80023de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000000 	.word	0x20000000
 800243c:	431bde83 	.word	0x431bde83

08002440 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b01      	cmp	r3, #1
 8002458:	d12e      	bne.n	80024b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f022 0201 	bic.w	r2, r2, #1
 8002468:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800246a:	f7ff fbd1 	bl	8001c10 <HAL_GetTick>
 800246e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002470:	e01b      	b.n	80024aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002472:	f7ff fbcd 	bl	8001c10 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d914      	bls.n	80024aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b01      	cmp	r3, #1
 800248c:	d10d      	bne.n	80024aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002492:	f043 0210 	orr.w	r2, r3, #16
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249e:	f043 0201 	orr.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e007      	b.n	80024ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d0dc      	beq.n	8002472 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <__NVIC_SetPriorityGrouping+0x44>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e0:	4013      	ands	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024f6:	4a04      	ldr	r2, [pc, #16]	; (8002508 <__NVIC_SetPriorityGrouping+0x44>)
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	60d3      	str	r3, [r2, #12]
}
 80024fc:	bf00      	nop
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <__NVIC_GetPriorityGrouping+0x18>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	0a1b      	lsrs	r3, r3, #8
 8002516:	f003 0307 	and.w	r3, r3, #7
}
 800251a:	4618      	mov	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	2b00      	cmp	r3, #0
 8002538:	db0b      	blt.n	8002552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	f003 021f 	and.w	r2, r3, #31
 8002540:	4906      	ldr	r1, [pc, #24]	; (800255c <__NVIC_EnableIRQ+0x34>)
 8002542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	2001      	movs	r0, #1
 800254a:	fa00 f202 	lsl.w	r2, r0, r2
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	; (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f1c3 0307 	rsb	r3, r3, #7
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	bf28      	it	cs
 80025d2:	2304      	movcs	r3, #4
 80025d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3304      	adds	r3, #4
 80025da:	2b06      	cmp	r3, #6
 80025dc:	d902      	bls.n	80025e4 <NVIC_EncodePriority+0x30>
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3b03      	subs	r3, #3
 80025e2:	e000      	b.n	80025e6 <NVIC_EncodePriority+0x32>
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	f04f 32ff 	mov.w	r2, #4294967295
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	401a      	ands	r2, r3
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	43d9      	mvns	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	4313      	orrs	r3, r2
         );
}
 800260e:	4618      	mov	r0, r3
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3b01      	subs	r3, #1
 8002624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002628:	d301      	bcc.n	800262e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800262a:	2301      	movs	r3, #1
 800262c:	e00f      	b.n	800264e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800262e:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <SysTick_Config+0x40>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3b01      	subs	r3, #1
 8002634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002636:	210f      	movs	r1, #15
 8002638:	f04f 30ff 	mov.w	r0, #4294967295
 800263c:	f7ff ff90 	bl	8002560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <SysTick_Config+0x40>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002646:	4b04      	ldr	r3, [pc, #16]	; (8002658 <SysTick_Config+0x40>)
 8002648:	2207      	movs	r2, #7
 800264a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	e000e010 	.word	0xe000e010

0800265c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ff2d 	bl	80024c4 <__NVIC_SetPriorityGrouping>
}
 800266a:	bf00      	nop
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	60b9      	str	r1, [r7, #8]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002684:	f7ff ff42 	bl	800250c <__NVIC_GetPriorityGrouping>
 8002688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f7ff ff90 	bl	80025b4 <NVIC_EncodePriority>
 8002694:	4602      	mov	r2, r0
 8002696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff5f 	bl	8002560 <__NVIC_SetPriority>
}
 80026a2:	bf00      	nop
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff35 	bl	8002528 <__NVIC_EnableIRQ>
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ffa2 	bl	8002618 <SysTick_Config>
 80026d4:	4603      	mov	r3, r0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e043      	b.n	800277e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	4b22      	ldr	r3, [pc, #136]	; (8002788 <HAL_DMA_Init+0xa8>)
 80026fe:	4413      	add	r3, r2
 8002700:	4a22      	ldr	r2, [pc, #136]	; (800278c <HAL_DMA_Init+0xac>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	009a      	lsls	r2, r3, #2
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <HAL_DMA_Init+0xb0>)
 8002712:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800272a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800272e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	bffdfff8 	.word	0xbffdfff8
 800278c:	cccccccd 	.word	0xcccccccd
 8002790:	40020000 	.word	0x40020000

08002794 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a2:	2300      	movs	r3, #0
 80027a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_DMA_Start_IT+0x20>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e04b      	b.n	800284c <HAL_DMA_Start_IT+0xb8>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d13a      	bne.n	800283e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 0201 	bic.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 f9af 	bl	8002b50 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 020e 	orr.w	r2, r2, #14
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e00f      	b.n	800282c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0204 	bic.w	r2, r2, #4
 800281a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 020a 	orr.w	r2, r2, #10
 800282a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e005      	b.n	800284a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002846:	2302      	movs	r3, #2
 8002848:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800284a:	7dfb      	ldrb	r3, [r7, #23]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d005      	beq.n	8002878 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2204      	movs	r2, #4
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	73fb      	strb	r3, [r7, #15]
 8002876:	e051      	b.n	800291c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 020e 	bic.w	r2, r2, #14
 8002886:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 0201 	bic.w	r2, r2, #1
 8002896:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a22      	ldr	r2, [pc, #136]	; (8002928 <HAL_DMA_Abort_IT+0xd4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d029      	beq.n	80028f6 <HAL_DMA_Abort_IT+0xa2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a21      	ldr	r2, [pc, #132]	; (800292c <HAL_DMA_Abort_IT+0xd8>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d022      	beq.n	80028f2 <HAL_DMA_Abort_IT+0x9e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_DMA_Abort_IT+0xdc>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01a      	beq.n	80028ec <HAL_DMA_Abort_IT+0x98>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <HAL_DMA_Abort_IT+0xe0>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d012      	beq.n	80028e6 <HAL_DMA_Abort_IT+0x92>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <HAL_DMA_Abort_IT+0xe4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00a      	beq.n	80028e0 <HAL_DMA_Abort_IT+0x8c>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_DMA_Abort_IT+0xe8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d102      	bne.n	80028da <HAL_DMA_Abort_IT+0x86>
 80028d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028d8:	e00e      	b.n	80028f8 <HAL_DMA_Abort_IT+0xa4>
 80028da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028de:	e00b      	b.n	80028f8 <HAL_DMA_Abort_IT+0xa4>
 80028e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028e4:	e008      	b.n	80028f8 <HAL_DMA_Abort_IT+0xa4>
 80028e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028ea:	e005      	b.n	80028f8 <HAL_DMA_Abort_IT+0xa4>
 80028ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028f0:	e002      	b.n	80028f8 <HAL_DMA_Abort_IT+0xa4>
 80028f2:	2310      	movs	r3, #16
 80028f4:	e000      	b.n	80028f8 <HAL_DMA_Abort_IT+0xa4>
 80028f6:	2301      	movs	r3, #1
 80028f8:	4a11      	ldr	r2, [pc, #68]	; (8002940 <HAL_DMA_Abort_IT+0xec>)
 80028fa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	4798      	blx	r3
    } 
  }
  return status;
 800291c:	7bfb      	ldrb	r3, [r7, #15]
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40020008 	.word	0x40020008
 800292c:	4002001c 	.word	0x4002001c
 8002930:	40020030 	.word	0x40020030
 8002934:	40020044 	.word	0x40020044
 8002938:	40020058 	.word	0x40020058
 800293c:	4002006c 	.word	0x4002006c
 8002940:	40020000 	.word	0x40020000

08002944 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002960:	2204      	movs	r2, #4
 8002962:	409a      	lsls	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4013      	ands	r3, r2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d04f      	beq.n	8002a0c <HAL_DMA_IRQHandler+0xc8>
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	2b00      	cmp	r3, #0
 8002974:	d04a      	beq.n	8002a0c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b00      	cmp	r3, #0
 8002982:	d107      	bne.n	8002994 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0204 	bic.w	r2, r2, #4
 8002992:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a66      	ldr	r2, [pc, #408]	; (8002b34 <HAL_DMA_IRQHandler+0x1f0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d029      	beq.n	80029f2 <HAL_DMA_IRQHandler+0xae>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a65      	ldr	r2, [pc, #404]	; (8002b38 <HAL_DMA_IRQHandler+0x1f4>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d022      	beq.n	80029ee <HAL_DMA_IRQHandler+0xaa>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a63      	ldr	r2, [pc, #396]	; (8002b3c <HAL_DMA_IRQHandler+0x1f8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01a      	beq.n	80029e8 <HAL_DMA_IRQHandler+0xa4>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a62      	ldr	r2, [pc, #392]	; (8002b40 <HAL_DMA_IRQHandler+0x1fc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d012      	beq.n	80029e2 <HAL_DMA_IRQHandler+0x9e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a60      	ldr	r2, [pc, #384]	; (8002b44 <HAL_DMA_IRQHandler+0x200>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00a      	beq.n	80029dc <HAL_DMA_IRQHandler+0x98>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a5f      	ldr	r2, [pc, #380]	; (8002b48 <HAL_DMA_IRQHandler+0x204>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d102      	bne.n	80029d6 <HAL_DMA_IRQHandler+0x92>
 80029d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029d4:	e00e      	b.n	80029f4 <HAL_DMA_IRQHandler+0xb0>
 80029d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80029da:	e00b      	b.n	80029f4 <HAL_DMA_IRQHandler+0xb0>
 80029dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80029e0:	e008      	b.n	80029f4 <HAL_DMA_IRQHandler+0xb0>
 80029e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029e6:	e005      	b.n	80029f4 <HAL_DMA_IRQHandler+0xb0>
 80029e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029ec:	e002      	b.n	80029f4 <HAL_DMA_IRQHandler+0xb0>
 80029ee:	2340      	movs	r3, #64	; 0x40
 80029f0:	e000      	b.n	80029f4 <HAL_DMA_IRQHandler+0xb0>
 80029f2:	2304      	movs	r3, #4
 80029f4:	4a55      	ldr	r2, [pc, #340]	; (8002b4c <HAL_DMA_IRQHandler+0x208>)
 80029f6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8094 	beq.w	8002b2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002a0a:	e08e      	b.n	8002b2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	2202      	movs	r2, #2
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d056      	beq.n	8002aca <HAL_DMA_IRQHandler+0x186>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d051      	beq.n	8002aca <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0320 	and.w	r3, r3, #32
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10b      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 020a 	bic.w	r2, r2, #10
 8002a42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a38      	ldr	r2, [pc, #224]	; (8002b34 <HAL_DMA_IRQHandler+0x1f0>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d029      	beq.n	8002aaa <HAL_DMA_IRQHandler+0x166>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a37      	ldr	r2, [pc, #220]	; (8002b38 <HAL_DMA_IRQHandler+0x1f4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d022      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x162>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a35      	ldr	r2, [pc, #212]	; (8002b3c <HAL_DMA_IRQHandler+0x1f8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01a      	beq.n	8002aa0 <HAL_DMA_IRQHandler+0x15c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <HAL_DMA_IRQHandler+0x1fc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d012      	beq.n	8002a9a <HAL_DMA_IRQHandler+0x156>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a32      	ldr	r2, [pc, #200]	; (8002b44 <HAL_DMA_IRQHandler+0x200>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00a      	beq.n	8002a94 <HAL_DMA_IRQHandler+0x150>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a31      	ldr	r2, [pc, #196]	; (8002b48 <HAL_DMA_IRQHandler+0x204>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d102      	bne.n	8002a8e <HAL_DMA_IRQHandler+0x14a>
 8002a88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a8c:	e00e      	b.n	8002aac <HAL_DMA_IRQHandler+0x168>
 8002a8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a92:	e00b      	b.n	8002aac <HAL_DMA_IRQHandler+0x168>
 8002a94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a98:	e008      	b.n	8002aac <HAL_DMA_IRQHandler+0x168>
 8002a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a9e:	e005      	b.n	8002aac <HAL_DMA_IRQHandler+0x168>
 8002aa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aa4:	e002      	b.n	8002aac <HAL_DMA_IRQHandler+0x168>
 8002aa6:	2320      	movs	r3, #32
 8002aa8:	e000      	b.n	8002aac <HAL_DMA_IRQHandler+0x168>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	4a27      	ldr	r2, [pc, #156]	; (8002b4c <HAL_DMA_IRQHandler+0x208>)
 8002aae:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d034      	beq.n	8002b2a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002ac8:	e02f      	b.n	8002b2a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	2208      	movs	r2, #8
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d028      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x1e8>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f003 0308 	and.w	r3, r3, #8
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d023      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 020e 	bic.w	r2, r2, #14
 8002af2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afc:	2101      	movs	r1, #1
 8002afe:	fa01 f202 	lsl.w	r2, r1, r2
 8002b02:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d004      	beq.n	8002b2c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	4798      	blx	r3
    }
  }
  return;
 8002b2a:	bf00      	nop
 8002b2c:	bf00      	nop
}
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40020008 	.word	0x40020008
 8002b38:	4002001c 	.word	0x4002001c
 8002b3c:	40020030 	.word	0x40020030
 8002b40:	40020044 	.word	0x40020044
 8002b44:	40020058 	.word	0x40020058
 8002b48:	4002006c 	.word	0x4002006c
 8002b4c:	40020000 	.word	0x40020000

08002b50 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b66:	2101      	movs	r1, #1
 8002b68:	fa01 f202 	lsl.w	r2, r1, r2
 8002b6c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b10      	cmp	r3, #16
 8002b7c:	d108      	bne.n	8002b90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b8e:	e007      	b.n	8002ba0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	60da      	str	r2, [r3, #12]
}
 8002ba0:	bf00      	nop
 8002ba2:	3714      	adds	r7, #20
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b08b      	sub	sp, #44	; 0x2c
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bbe:	e169      	b.n	8002e94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69fa      	ldr	r2, [r7, #28]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	f040 8158 	bne.w	8002e8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	4a9a      	ldr	r2, [pc, #616]	; (8002e4c <HAL_GPIO_Init+0x2a0>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d05e      	beq.n	8002ca6 <HAL_GPIO_Init+0xfa>
 8002be8:	4a98      	ldr	r2, [pc, #608]	; (8002e4c <HAL_GPIO_Init+0x2a0>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d875      	bhi.n	8002cda <HAL_GPIO_Init+0x12e>
 8002bee:	4a98      	ldr	r2, [pc, #608]	; (8002e50 <HAL_GPIO_Init+0x2a4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d058      	beq.n	8002ca6 <HAL_GPIO_Init+0xfa>
 8002bf4:	4a96      	ldr	r2, [pc, #600]	; (8002e50 <HAL_GPIO_Init+0x2a4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d86f      	bhi.n	8002cda <HAL_GPIO_Init+0x12e>
 8002bfa:	4a96      	ldr	r2, [pc, #600]	; (8002e54 <HAL_GPIO_Init+0x2a8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d052      	beq.n	8002ca6 <HAL_GPIO_Init+0xfa>
 8002c00:	4a94      	ldr	r2, [pc, #592]	; (8002e54 <HAL_GPIO_Init+0x2a8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d869      	bhi.n	8002cda <HAL_GPIO_Init+0x12e>
 8002c06:	4a94      	ldr	r2, [pc, #592]	; (8002e58 <HAL_GPIO_Init+0x2ac>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d04c      	beq.n	8002ca6 <HAL_GPIO_Init+0xfa>
 8002c0c:	4a92      	ldr	r2, [pc, #584]	; (8002e58 <HAL_GPIO_Init+0x2ac>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d863      	bhi.n	8002cda <HAL_GPIO_Init+0x12e>
 8002c12:	4a92      	ldr	r2, [pc, #584]	; (8002e5c <HAL_GPIO_Init+0x2b0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d046      	beq.n	8002ca6 <HAL_GPIO_Init+0xfa>
 8002c18:	4a90      	ldr	r2, [pc, #576]	; (8002e5c <HAL_GPIO_Init+0x2b0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d85d      	bhi.n	8002cda <HAL_GPIO_Init+0x12e>
 8002c1e:	2b12      	cmp	r3, #18
 8002c20:	d82a      	bhi.n	8002c78 <HAL_GPIO_Init+0xcc>
 8002c22:	2b12      	cmp	r3, #18
 8002c24:	d859      	bhi.n	8002cda <HAL_GPIO_Init+0x12e>
 8002c26:	a201      	add	r2, pc, #4	; (adr r2, 8002c2c <HAL_GPIO_Init+0x80>)
 8002c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c2c:	08002ca7 	.word	0x08002ca7
 8002c30:	08002c81 	.word	0x08002c81
 8002c34:	08002c93 	.word	0x08002c93
 8002c38:	08002cd5 	.word	0x08002cd5
 8002c3c:	08002cdb 	.word	0x08002cdb
 8002c40:	08002cdb 	.word	0x08002cdb
 8002c44:	08002cdb 	.word	0x08002cdb
 8002c48:	08002cdb 	.word	0x08002cdb
 8002c4c:	08002cdb 	.word	0x08002cdb
 8002c50:	08002cdb 	.word	0x08002cdb
 8002c54:	08002cdb 	.word	0x08002cdb
 8002c58:	08002cdb 	.word	0x08002cdb
 8002c5c:	08002cdb 	.word	0x08002cdb
 8002c60:	08002cdb 	.word	0x08002cdb
 8002c64:	08002cdb 	.word	0x08002cdb
 8002c68:	08002cdb 	.word	0x08002cdb
 8002c6c:	08002cdb 	.word	0x08002cdb
 8002c70:	08002c89 	.word	0x08002c89
 8002c74:	08002c9d 	.word	0x08002c9d
 8002c78:	4a79      	ldr	r2, [pc, #484]	; (8002e60 <HAL_GPIO_Init+0x2b4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d013      	beq.n	8002ca6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c7e:	e02c      	b.n	8002cda <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	623b      	str	r3, [r7, #32]
          break;
 8002c86:	e029      	b.n	8002cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	623b      	str	r3, [r7, #32]
          break;
 8002c90:	e024      	b.n	8002cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	3308      	adds	r3, #8
 8002c98:	623b      	str	r3, [r7, #32]
          break;
 8002c9a:	e01f      	b.n	8002cdc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	330c      	adds	r3, #12
 8002ca2:	623b      	str	r3, [r7, #32]
          break;
 8002ca4:	e01a      	b.n	8002cdc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cae:	2304      	movs	r3, #4
 8002cb0:	623b      	str	r3, [r7, #32]
          break;
 8002cb2:	e013      	b.n	8002cdc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	611a      	str	r2, [r3, #16]
          break;
 8002cc6:	e009      	b.n	8002cdc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cc8:	2308      	movs	r3, #8
 8002cca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	615a      	str	r2, [r3, #20]
          break;
 8002cd2:	e003      	b.n	8002cdc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	623b      	str	r3, [r7, #32]
          break;
 8002cd8:	e000      	b.n	8002cdc <HAL_GPIO_Init+0x130>
          break;
 8002cda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2bff      	cmp	r3, #255	; 0xff
 8002ce0:	d801      	bhi.n	8002ce6 <HAL_GPIO_Init+0x13a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	e001      	b.n	8002cea <HAL_GPIO_Init+0x13e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2bff      	cmp	r3, #255	; 0xff
 8002cf0:	d802      	bhi.n	8002cf8 <HAL_GPIO_Init+0x14c>
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	e002      	b.n	8002cfe <HAL_GPIO_Init+0x152>
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	3b08      	subs	r3, #8
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	210f      	movs	r1, #15
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	401a      	ands	r2, r3
 8002d10:	6a39      	ldr	r1, [r7, #32]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80b1 	beq.w	8002e8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d2c:	4b4d      	ldr	r3, [pc, #308]	; (8002e64 <HAL_GPIO_Init+0x2b8>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	4a4c      	ldr	r2, [pc, #304]	; (8002e64 <HAL_GPIO_Init+0x2b8>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6193      	str	r3, [r2, #24]
 8002d38:	4b4a      	ldr	r3, [pc, #296]	; (8002e64 <HAL_GPIO_Init+0x2b8>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d44:	4a48      	ldr	r2, [pc, #288]	; (8002e68 <HAL_GPIO_Init+0x2bc>)
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a40      	ldr	r2, [pc, #256]	; (8002e6c <HAL_GPIO_Init+0x2c0>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d013      	beq.n	8002d98 <HAL_GPIO_Init+0x1ec>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a3f      	ldr	r2, [pc, #252]	; (8002e70 <HAL_GPIO_Init+0x2c4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00d      	beq.n	8002d94 <HAL_GPIO_Init+0x1e8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a3e      	ldr	r2, [pc, #248]	; (8002e74 <HAL_GPIO_Init+0x2c8>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d007      	beq.n	8002d90 <HAL_GPIO_Init+0x1e4>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a3d      	ldr	r2, [pc, #244]	; (8002e78 <HAL_GPIO_Init+0x2cc>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d101      	bne.n	8002d8c <HAL_GPIO_Init+0x1e0>
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e006      	b.n	8002d9a <HAL_GPIO_Init+0x1ee>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	e004      	b.n	8002d9a <HAL_GPIO_Init+0x1ee>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e002      	b.n	8002d9a <HAL_GPIO_Init+0x1ee>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_GPIO_Init+0x1ee>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9c:	f002 0203 	and.w	r2, r2, #3
 8002da0:	0092      	lsls	r2, r2, #2
 8002da2:	4093      	lsls	r3, r2
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002daa:	492f      	ldr	r1, [pc, #188]	; (8002e68 <HAL_GPIO_Init+0x2bc>)
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	3302      	adds	r3, #2
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d006      	beq.n	8002dd2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dc4:	4b2d      	ldr	r3, [pc, #180]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	492c      	ldr	r1, [pc, #176]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	608b      	str	r3, [r1, #8]
 8002dd0:	e006      	b.n	8002de0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dd2:	4b2a      	ldr	r3, [pc, #168]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	4928      	ldr	r1, [pc, #160]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d006      	beq.n	8002dfa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dec:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	4922      	ldr	r1, [pc, #136]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60cb      	str	r3, [r1, #12]
 8002df8:	e006      	b.n	8002e08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dfa:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	491e      	ldr	r1, [pc, #120]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d006      	beq.n	8002e22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e14:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4918      	ldr	r1, [pc, #96]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
 8002e20:	e006      	b.n	8002e30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e22:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	4914      	ldr	r1, [pc, #80]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d021      	beq.n	8002e80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	490e      	ldr	r1, [pc, #56]	; (8002e7c <HAL_GPIO_Init+0x2d0>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]
 8002e48:	e021      	b.n	8002e8e <HAL_GPIO_Init+0x2e2>
 8002e4a:	bf00      	nop
 8002e4c:	10320000 	.word	0x10320000
 8002e50:	10310000 	.word	0x10310000
 8002e54:	10220000 	.word	0x10220000
 8002e58:	10210000 	.word	0x10210000
 8002e5c:	10120000 	.word	0x10120000
 8002e60:	10110000 	.word	0x10110000
 8002e64:	40021000 	.word	0x40021000
 8002e68:	40010000 	.word	0x40010000
 8002e6c:	40010800 	.word	0x40010800
 8002e70:	40010c00 	.word	0x40010c00
 8002e74:	40011000 	.word	0x40011000
 8002e78:	40011400 	.word	0x40011400
 8002e7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e80:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <HAL_GPIO_Init+0x304>)
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	4909      	ldr	r1, [pc, #36]	; (8002eb0 <HAL_GPIO_Init+0x304>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	3301      	adds	r3, #1
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f47f ae8e 	bne.w	8002bc0 <HAL_GPIO_Init+0x14>
  }
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	372c      	adds	r7, #44	; 0x2c
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr
 8002eb0:	40010400 	.word	0x40010400

08002eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e272      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	f000 8087 	beq.w	8002fe2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed4:	4b92      	ldr	r3, [pc, #584]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 030c 	and.w	r3, r3, #12
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d00c      	beq.n	8002efa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ee0:	4b8f      	ldr	r3, [pc, #572]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 030c 	and.w	r3, r3, #12
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d112      	bne.n	8002f12 <HAL_RCC_OscConfig+0x5e>
 8002eec:	4b8c      	ldr	r3, [pc, #560]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d10b      	bne.n	8002f12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efa:	4b89      	ldr	r3, [pc, #548]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d06c      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x12c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d168      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e24c      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1a:	d106      	bne.n	8002f2a <HAL_RCC_OscConfig+0x76>
 8002f1c:	4b80      	ldr	r3, [pc, #512]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a7f      	ldr	r2, [pc, #508]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	e02e      	b.n	8002f88 <HAL_RCC_OscConfig+0xd4>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x98>
 8002f32:	4b7b      	ldr	r3, [pc, #492]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a7a      	ldr	r2, [pc, #488]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b78      	ldr	r3, [pc, #480]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a77      	ldr	r2, [pc, #476]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e01d      	b.n	8002f88 <HAL_RCC_OscConfig+0xd4>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCC_OscConfig+0xbc>
 8002f56:	4b72      	ldr	r3, [pc, #456]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a71      	ldr	r2, [pc, #452]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	4b6f      	ldr	r3, [pc, #444]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a6e      	ldr	r2, [pc, #440]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCC_OscConfig+0xd4>
 8002f70:	4b6b      	ldr	r3, [pc, #428]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6a      	ldr	r2, [pc, #424]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7a:	6013      	str	r3, [r2, #0]
 8002f7c:	4b68      	ldr	r3, [pc, #416]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a67      	ldr	r2, [pc, #412]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d013      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fe fe3e 	bl	8001c10 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	e008      	b.n	8002faa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fe fe3a 	bl	8001c10 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e200      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002faa:	4b5d      	ldr	r3, [pc, #372]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0f0      	beq.n	8002f98 <HAL_RCC_OscConfig+0xe4>
 8002fb6:	e014      	b.n	8002fe2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb8:	f7fe fe2a 	bl	8001c10 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc0:	f7fe fe26 	bl	8001c10 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	; 0x64
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e1ec      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fd2:	4b53      	ldr	r3, [pc, #332]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x10c>
 8002fde:	e000      	b.n	8002fe2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d063      	beq.n	80030b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fee:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00b      	beq.n	8003012 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ffa:	4b49      	ldr	r3, [pc, #292]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b08      	cmp	r3, #8
 8003004:	d11c      	bne.n	8003040 <HAL_RCC_OscConfig+0x18c>
 8003006:	4b46      	ldr	r3, [pc, #280]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d116      	bne.n	8003040 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	4b43      	ldr	r3, [pc, #268]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d005      	beq.n	800302a <HAL_RCC_OscConfig+0x176>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d001      	beq.n	800302a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e1c0      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302a:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4939      	ldr	r1, [pc, #228]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303e:	e03a      	b.n	80030b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003048:	4b36      	ldr	r3, [pc, #216]	; (8003124 <HAL_RCC_OscConfig+0x270>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304e:	f7fe fddf 	bl	8001c10 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003056:	f7fe fddb 	bl	8001c10 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e1a1      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003068:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b2a      	ldr	r3, [pc, #168]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4927      	ldr	r1, [pc, #156]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]
 8003088:	e015      	b.n	80030b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308a:	4b26      	ldr	r3, [pc, #152]	; (8003124 <HAL_RCC_OscConfig+0x270>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003090:	f7fe fdbe 	bl	8001c10 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003098:	f7fe fdba 	bl	8001c10 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e180      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030aa:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d03a      	beq.n	8003138 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d019      	beq.n	80030fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ca:	4b17      	ldr	r3, [pc, #92]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d0:	f7fe fd9e 	bl	8001c10 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d8:	f7fe fd9a 	bl	8001c10 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e160      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0f0      	beq.n	80030d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030f6:	2001      	movs	r0, #1
 80030f8:	f000 faba 	bl	8003670 <RCC_Delay>
 80030fc:	e01c      	b.n	8003138 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030fe:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <HAL_RCC_OscConfig+0x274>)
 8003100:	2200      	movs	r2, #0
 8003102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003104:	f7fe fd84 	bl	8001c10 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800310a:	e00f      	b.n	800312c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310c:	f7fe fd80 	bl	8001c10 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d908      	bls.n	800312c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e146      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000
 8003124:	42420000 	.word	0x42420000
 8003128:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800312c:	4b92      	ldr	r3, [pc, #584]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1e9      	bne.n	800310c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80a6 	beq.w	8003292 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003146:	2300      	movs	r3, #0
 8003148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314a:	4b8b      	ldr	r3, [pc, #556]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10d      	bne.n	8003172 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	4b88      	ldr	r3, [pc, #544]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	4a87      	ldr	r2, [pc, #540]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003160:	61d3      	str	r3, [r2, #28]
 8003162:	4b85      	ldr	r3, [pc, #532]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800316e:	2301      	movs	r3, #1
 8003170:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003172:	4b82      	ldr	r3, [pc, #520]	; (800337c <HAL_RCC_OscConfig+0x4c8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d118      	bne.n	80031b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800317e:	4b7f      	ldr	r3, [pc, #508]	; (800337c <HAL_RCC_OscConfig+0x4c8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a7e      	ldr	r2, [pc, #504]	; (800337c <HAL_RCC_OscConfig+0x4c8>)
 8003184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800318a:	f7fe fd41 	bl	8001c10 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003192:	f7fe fd3d 	bl	8001c10 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b64      	cmp	r3, #100	; 0x64
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e103      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	4b75      	ldr	r3, [pc, #468]	; (800337c <HAL_RCC_OscConfig+0x4c8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d106      	bne.n	80031c6 <HAL_RCC_OscConfig+0x312>
 80031b8:	4b6f      	ldr	r3, [pc, #444]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4a6e      	ldr	r2, [pc, #440]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	e02d      	b.n	8003222 <HAL_RCC_OscConfig+0x36e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10c      	bne.n	80031e8 <HAL_RCC_OscConfig+0x334>
 80031ce:	4b6a      	ldr	r3, [pc, #424]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a69      	ldr	r2, [pc, #420]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6213      	str	r3, [r2, #32]
 80031da:	4b67      	ldr	r3, [pc, #412]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4a66      	ldr	r2, [pc, #408]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	6213      	str	r3, [r2, #32]
 80031e6:	e01c      	b.n	8003222 <HAL_RCC_OscConfig+0x36e>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b05      	cmp	r3, #5
 80031ee:	d10c      	bne.n	800320a <HAL_RCC_OscConfig+0x356>
 80031f0:	4b61      	ldr	r3, [pc, #388]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a60      	ldr	r2, [pc, #384]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	f043 0304 	orr.w	r3, r3, #4
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	4b5e      	ldr	r3, [pc, #376]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	4a5d      	ldr	r2, [pc, #372]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6213      	str	r3, [r2, #32]
 8003208:	e00b      	b.n	8003222 <HAL_RCC_OscConfig+0x36e>
 800320a:	4b5b      	ldr	r3, [pc, #364]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	4a5a      	ldr	r2, [pc, #360]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	6213      	str	r3, [r2, #32]
 8003216:	4b58      	ldr	r3, [pc, #352]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a57      	ldr	r2, [pc, #348]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d015      	beq.n	8003256 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800322a:	f7fe fcf1 	bl	8001c10 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003232:	f7fe fced 	bl	8001c10 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003240:	4293      	cmp	r3, r2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e0b1      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	4b4b      	ldr	r3, [pc, #300]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0ee      	beq.n	8003232 <HAL_RCC_OscConfig+0x37e>
 8003254:	e014      	b.n	8003280 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003256:	f7fe fcdb 	bl	8001c10 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7fe fcd7 	bl	8001c10 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	; 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e09b      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003274:	4b40      	ldr	r3, [pc, #256]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1ee      	bne.n	800325e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003280:	7dfb      	ldrb	r3, [r7, #23]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d105      	bne.n	8003292 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003286:	4b3c      	ldr	r3, [pc, #240]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	4a3b      	ldr	r2, [pc, #236]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 800328c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003290:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	2b00      	cmp	r3, #0
 8003298:	f000 8087 	beq.w	80033aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800329c:	4b36      	ldr	r3, [pc, #216]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d061      	beq.n	800336c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d146      	bne.n	800333e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b0:	4b33      	ldr	r3, [pc, #204]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b6:	f7fe fcab 	bl	8001c10 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032be:	f7fe fca7 	bl	8001c10 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e06d      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032d0:	4b29      	ldr	r3, [pc, #164]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f0      	bne.n	80032be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e4:	d108      	bne.n	80032f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032e6:	4b24      	ldr	r3, [pc, #144]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	4921      	ldr	r1, [pc, #132]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f8:	4b1f      	ldr	r3, [pc, #124]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a19      	ldr	r1, [r3, #32]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	430b      	orrs	r3, r1
 800330a:	491b      	ldr	r1, [pc, #108]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003312:	2201      	movs	r2, #1
 8003314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003316:	f7fe fc7b 	bl	8001c10 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331e:	f7fe fc77 	bl	8001c10 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e03d      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x46a>
 800333c:	e035      	b.n	80033aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333e:	4b10      	ldr	r3, [pc, #64]	; (8003380 <HAL_RCC_OscConfig+0x4cc>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe fc64 	bl	8001c10 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334c:	f7fe fc60 	bl	8001c10 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e026      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800335e:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x498>
 800336a:	e01e      	b.n	80033aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d107      	bne.n	8003384 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e019      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
 8003378:	40021000 	.word	0x40021000
 800337c:	40007000 	.word	0x40007000
 8003380:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003384:	4b0b      	ldr	r3, [pc, #44]	; (80033b4 <HAL_RCC_OscConfig+0x500>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	429a      	cmp	r2, r3
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40021000 	.word	0x40021000

080033b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0d0      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033cc:	4b6a      	ldr	r3, [pc, #424]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d910      	bls.n	80033fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033da:	4b67      	ldr	r3, [pc, #412]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f023 0207 	bic.w	r2, r3, #7
 80033e2:	4965      	ldr	r1, [pc, #404]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ea:	4b63      	ldr	r3, [pc, #396]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0b8      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d020      	beq.n	800344a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003414:	4b59      	ldr	r3, [pc, #356]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4a58      	ldr	r2, [pc, #352]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800341e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d005      	beq.n	8003438 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800342c:	4b53      	ldr	r3, [pc, #332]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4a52      	ldr	r2, [pc, #328]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003436:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003438:	4b50      	ldr	r3, [pc, #320]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	494d      	ldr	r1, [pc, #308]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	4313      	orrs	r3, r2
 8003448:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d040      	beq.n	80034d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345e:	4b47      	ldr	r3, [pc, #284]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d115      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e07f      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d107      	bne.n	8003486 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	4b41      	ldr	r3, [pc, #260]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d109      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e073      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	4b3d      	ldr	r3, [pc, #244]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e06b      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003496:	4b39      	ldr	r3, [pc, #228]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f023 0203 	bic.w	r2, r3, #3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	4936      	ldr	r1, [pc, #216]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a8:	f7fe fbb2 	bl	8001c10 <HAL_GetTick>
 80034ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	e00a      	b.n	80034c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034b0:	f7fe fbae 	bl	8001c10 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80034be:	4293      	cmp	r3, r2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e053      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c6:	4b2d      	ldr	r3, [pc, #180]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f003 020c 	and.w	r2, r3, #12
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d1eb      	bne.n	80034b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d8:	4b27      	ldr	r3, [pc, #156]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d210      	bcs.n	8003508 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b24      	ldr	r3, [pc, #144]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f023 0207 	bic.w	r2, r3, #7
 80034ee:	4922      	ldr	r1, [pc, #136]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <HAL_RCC_ClockConfig+0x1c0>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	429a      	cmp	r2, r3
 8003502:	d001      	beq.n	8003508 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e032      	b.n	800356e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	d008      	beq.n	8003526 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	4916      	ldr	r1, [pc, #88]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d009      	beq.n	8003546 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003532:	4b12      	ldr	r3, [pc, #72]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	490e      	ldr	r1, [pc, #56]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003546:	f000 f821 	bl	800358c <HAL_RCC_GetSysClockFreq>
 800354a:	4602      	mov	r2, r0
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	091b      	lsrs	r3, r3, #4
 8003552:	f003 030f 	and.w	r3, r3, #15
 8003556:	490a      	ldr	r1, [pc, #40]	; (8003580 <HAL_RCC_ClockConfig+0x1c8>)
 8003558:	5ccb      	ldrb	r3, [r1, r3]
 800355a:	fa22 f303 	lsr.w	r3, r2, r3
 800355e:	4a09      	ldr	r2, [pc, #36]	; (8003584 <HAL_RCC_ClockConfig+0x1cc>)
 8003560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_RCC_ClockConfig+0x1d0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe fb10 	bl	8001b8c <HAL_InitTick>

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40022000 	.word	0x40022000
 800357c:	40021000 	.word	0x40021000
 8003580:	08005c48 	.word	0x08005c48
 8003584:	20000000 	.word	0x20000000
 8003588:	20000004 	.word	0x20000004

0800358c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <HAL_RCC_GetSysClockFreq+0x94>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d002      	beq.n	80035bc <HAL_RCC_GetSysClockFreq+0x30>
 80035b6:	2b08      	cmp	r3, #8
 80035b8:	d003      	beq.n	80035c2 <HAL_RCC_GetSysClockFreq+0x36>
 80035ba:	e027      	b.n	800360c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035bc:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_RCC_GetSysClockFreq+0x98>)
 80035be:	613b      	str	r3, [r7, #16]
      break;
 80035c0:	e027      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	0c9b      	lsrs	r3, r3, #18
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	4a17      	ldr	r2, [pc, #92]	; (8003628 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035cc:	5cd3      	ldrb	r3, [r2, r3]
 80035ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d010      	beq.n	80035fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035da:	4b11      	ldr	r3, [pc, #68]	; (8003620 <HAL_RCC_GetSysClockFreq+0x94>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	0c5b      	lsrs	r3, r3, #17
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	4a11      	ldr	r2, [pc, #68]	; (800362c <HAL_RCC_GetSysClockFreq+0xa0>)
 80035e6:	5cd3      	ldrb	r3, [r2, r3]
 80035e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a0d      	ldr	r2, [pc, #52]	; (8003624 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ee:	fb03 f202 	mul.w	r2, r3, r2
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	e004      	b.n	8003606 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a0c      	ldr	r2, [pc, #48]	; (8003630 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003600:	fb02 f303 	mul.w	r3, r2, r3
 8003604:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	613b      	str	r3, [r7, #16]
      break;
 800360a:	e002      	b.n	8003612 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_RCC_GetSysClockFreq+0x98>)
 800360e:	613b      	str	r3, [r7, #16]
      break;
 8003610:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003612:	693b      	ldr	r3, [r7, #16]
}
 8003614:	4618      	mov	r0, r3
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000
 8003624:	007a1200 	.word	0x007a1200
 8003628:	08005c60 	.word	0x08005c60
 800362c:	08005c70 	.word	0x08005c70
 8003630:	003d0900 	.word	0x003d0900

08003634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003634:	b480      	push	{r7}
 8003636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003638:	4b02      	ldr	r3, [pc, #8]	; (8003644 <HAL_RCC_GetHCLKFreq+0x10>)
 800363a:	681b      	ldr	r3, [r3, #0]
}
 800363c:	4618      	mov	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	20000000 	.word	0x20000000

08003648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800364c:	f7ff fff2 	bl	8003634 <HAL_RCC_GetHCLKFreq>
 8003650:	4602      	mov	r2, r0
 8003652:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	0adb      	lsrs	r3, r3, #11
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	4903      	ldr	r1, [pc, #12]	; (800366c <HAL_RCC_GetPCLK2Freq+0x24>)
 800365e:	5ccb      	ldrb	r3, [r1, r3]
 8003660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40021000 	.word	0x40021000
 800366c:	08005c58 	.word	0x08005c58

08003670 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <RCC_Delay+0x34>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <RCC_Delay+0x38>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	0a5b      	lsrs	r3, r3, #9
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	fb02 f303 	mul.w	r3, r2, r3
 800368a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800368c:	bf00      	nop
  }
  while (Delay --);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1e5a      	subs	r2, r3, #1
 8003692:	60fa      	str	r2, [r7, #12]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1f9      	bne.n	800368c <RCC_Delay+0x1c>
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	20000000 	.word	0x20000000
 80036a8:	10624dd3 	.word	0x10624dd3

080036ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d07d      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036c8:	2300      	movs	r3, #0
 80036ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036cc:	4b4f      	ldr	r3, [pc, #316]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ce:	69db      	ldr	r3, [r3, #28]
 80036d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10d      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036d8:	4b4c      	ldr	r3, [pc, #304]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	4a4b      	ldr	r2, [pc, #300]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e2:	61d3      	str	r3, [r2, #28]
 80036e4:	4b49      	ldr	r3, [pc, #292]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f0:	2301      	movs	r3, #1
 80036f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f4:	4b46      	ldr	r3, [pc, #280]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d118      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003700:	4b43      	ldr	r3, [pc, #268]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a42      	ldr	r2, [pc, #264]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800370a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370c:	f7fe fa80 	bl	8001c10 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003712:	e008      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003714:	f7fe fa7c 	bl	8001c10 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	; 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e06d      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003726:	4b3a      	ldr	r3, [pc, #232]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003732:	4b36      	ldr	r3, [pc, #216]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800373a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d02e      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	429a      	cmp	r2, r3
 800374e:	d027      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003750:	4b2e      	ldr	r3, [pc, #184]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003758:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800375a:	4b2e      	ldr	r3, [pc, #184]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800375c:	2201      	movs	r2, #1
 800375e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003760:	4b2c      	ldr	r3, [pc, #176]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003766:	4a29      	ldr	r2, [pc, #164]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d014      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fe fa4b 	bl	8001c10 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fe fa47 	bl	8001c10 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e036      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0ee      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037a0:	4b1a      	ldr	r3, [pc, #104]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4917      	ldr	r1, [pc, #92]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	4a13      	ldr	r2, [pc, #76]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	490b      	ldr	r1, [pc, #44]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0310 	and.w	r3, r3, #16
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	4904      	ldr	r1, [pc, #16]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	40007000 	.word	0x40007000
 8003814:	42420440 	.word	0x42420440

08003818 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b088      	sub	sp, #32
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	2300      	movs	r3, #0
 8003826:	61fb      	str	r3, [r7, #28]
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	2300      	movs	r3, #0
 8003832:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b10      	cmp	r3, #16
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b10      	cmp	r3, #16
 800383e:	f200 808a 	bhi.w	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d045      	beq.n	80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d075      	beq.n	800393a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800384e:	e082      	b.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003850:	4b46      	ldr	r3, [pc, #280]	; (800396c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003856:	4b45      	ldr	r3, [pc, #276]	; (800396c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d07b      	beq.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	0c9b      	lsrs	r3, r3, #18
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	4a41      	ldr	r2, [pc, #260]	; (8003970 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800386c:	5cd3      	ldrb	r3, [r2, r3]
 800386e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d015      	beq.n	80038a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800387a:	4b3c      	ldr	r3, [pc, #240]	; (800396c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	0c5b      	lsrs	r3, r3, #17
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	4a3b      	ldr	r2, [pc, #236]	; (8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003886:	5cd3      	ldrb	r3, [r2, r3]
 8003888:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00d      	beq.n	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003894:	4a38      	ldr	r2, [pc, #224]	; (8003978 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	fbb2 f2f3 	udiv	r2, r2, r3
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	fb02 f303 	mul.w	r3, r2, r3
 80038a2:	61fb      	str	r3, [r7, #28]
 80038a4:	e004      	b.n	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4a34      	ldr	r2, [pc, #208]	; (800397c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80038aa:	fb02 f303 	mul.w	r3, r2, r3
 80038ae:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80038b0:	4b2e      	ldr	r3, [pc, #184]	; (800396c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038bc:	d102      	bne.n	80038c4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	61bb      	str	r3, [r7, #24]
      break;
 80038c2:	e04a      	b.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4a2d      	ldr	r2, [pc, #180]	; (8003980 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	085b      	lsrs	r3, r3, #1
 80038d0:	61bb      	str	r3, [r7, #24]
      break;
 80038d2:	e042      	b.n	800395a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80038d4:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e4:	d108      	bne.n	80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80038f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	e01f      	b.n	8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003902:	d109      	bne.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003904:	4b19      	ldr	r3, [pc, #100]	; (800396c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003910:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	e00f      	b.n	8003938 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800391e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003922:	d11c      	bne.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003924:	4b11      	ldr	r3, [pc, #68]	; (800396c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d016      	beq.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003930:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003934:	61bb      	str	r3, [r7, #24]
      break;
 8003936:	e012      	b.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003938:	e011      	b.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800393a:	f7ff fe85 	bl	8003648 <HAL_RCC_GetPCLK2Freq>
 800393e:	4602      	mov	r2, r0
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	0b9b      	lsrs	r3, r3, #14
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	3301      	adds	r3, #1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	61bb      	str	r3, [r7, #24]
      break;
 8003954:	e004      	b.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003956:	bf00      	nop
 8003958:	e002      	b.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800395e:	bf00      	nop
    }
  }
  return (frequency);
 8003960:	69bb      	ldr	r3, [r7, #24]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3720      	adds	r7, #32
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40021000 	.word	0x40021000
 8003970:	08005c74 	.word	0x08005c74
 8003974:	08005c84 	.word	0x08005c84
 8003978:	007a1200 	.word	0x007a1200
 800397c:	003d0900 	.word	0x003d0900
 8003980:	aaaaaaab 	.word	0xaaaaaaab

08003984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e041      	b.n	8003a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d106      	bne.n	80039b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7fd fffc 	bl	80019a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f000 fd5a 	bl	800447c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b082      	sub	sp, #8
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e041      	b.n	8003ab8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f839 	bl	8003ac0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	4619      	mov	r1, r3
 8003a60:	4610      	mov	r0, r2
 8003a62:	f000 fd0b 	bl	800447c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bc80      	pop	{r7}
 8003ad0:	4770      	bx	lr
	...

08003ad4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <HAL_TIM_PWM_Start_DMA+0x2c>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e022      	b.n	8003b46 <HAL_TIM_PWM_Start_DMA+0x72>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d109      	bne.n	8003b1a <HAL_TIM_PWM_Start_DMA+0x46>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	bf0c      	ite	eq
 8003b12:	2301      	moveq	r3, #1
 8003b14:	2300      	movne	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	e015      	b.n	8003b46 <HAL_TIM_PWM_Start_DMA+0x72>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d109      	bne.n	8003b34 <HAL_TIM_PWM_Start_DMA+0x60>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e008      	b.n	8003b46 <HAL_TIM_PWM_Start_DMA+0x72>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	bf0c      	ite	eq
 8003b40:	2301      	moveq	r3, #1
 8003b42:	2300      	movne	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e153      	b.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x322>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d109      	bne.n	8003b68 <HAL_TIM_PWM_Start_DMA+0x94>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	e022      	b.n	8003bae <HAL_TIM_PWM_Start_DMA+0xda>
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	2b04      	cmp	r3, #4
 8003b6c:	d109      	bne.n	8003b82 <HAL_TIM_PWM_Start_DMA+0xae>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	bf0c      	ite	eq
 8003b7a:	2301      	moveq	r3, #1
 8003b7c:	2300      	movne	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	e015      	b.n	8003bae <HAL_TIM_PWM_Start_DMA+0xda>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d109      	bne.n	8003b9c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	bf0c      	ite	eq
 8003b94:	2301      	moveq	r3, #1
 8003b96:	2300      	movne	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	e008      	b.n	8003bae <HAL_TIM_PWM_Start_DMA+0xda>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d024      	beq.n	8003bfc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_TIM_PWM_Start_DMA+0xea>
 8003bb8:	887b      	ldrh	r3, [r7, #2]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e119      	b.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x322>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd0:	e016      	b.n	8003c00 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be0:	e00e      	b.n	8003c00 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2202      	movs	r2, #2
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	e006      	b.n	8003c00 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bfa:	e001      	b.n	8003c00 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0fa      	b.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x322>
  }

  switch (Channel)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b0c      	cmp	r3, #12
 8003c04:	f200 80ae 	bhi.w	8003d64 <HAL_TIM_PWM_Start_DMA+0x290>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c45 	.word	0x08003c45
 8003c14:	08003d65 	.word	0x08003d65
 8003c18:	08003d65 	.word	0x08003d65
 8003c1c:	08003d65 	.word	0x08003d65
 8003c20:	08003c8d 	.word	0x08003c8d
 8003c24:	08003d65 	.word	0x08003d65
 8003c28:	08003d65 	.word	0x08003d65
 8003c2c:	08003d65 	.word	0x08003d65
 8003c30:	08003cd5 	.word	0x08003cd5
 8003c34:	08003d65 	.word	0x08003d65
 8003c38:	08003d65 	.word	0x08003d65
 8003c3c:	08003d65 	.word	0x08003d65
 8003c40:	08003d1d 	.word	0x08003d1d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	4a6d      	ldr	r2, [pc, #436]	; (8003e00 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	4a6c      	ldr	r2, [pc, #432]	; (8003e04 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	4a6b      	ldr	r2, [pc, #428]	; (8003e08 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	3334      	adds	r3, #52	; 0x34
 8003c68:	461a      	mov	r2, r3
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	f7fe fd92 	bl	8002794 <HAL_DMA_Start_IT>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0bd      	b.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x322>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c88:	60da      	str	r2, [r3, #12]
      break;
 8003c8a:	e06e      	b.n	8003d6a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	4a5b      	ldr	r2, [pc, #364]	; (8003e00 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003c92:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	4a5a      	ldr	r2, [pc, #360]	; (8003e04 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003c9a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	4a59      	ldr	r2, [pc, #356]	; (8003e08 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003ca2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3338      	adds	r3, #56	; 0x38
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	887b      	ldrh	r3, [r7, #2]
 8003cb4:	f7fe fd6e 	bl	8002794 <HAL_DMA_Start_IT>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e099      	b.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cd0:	60da      	str	r2, [r3, #12]
      break;
 8003cd2:	e04a      	b.n	8003d6a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd8:	4a49      	ldr	r2, [pc, #292]	; (8003e00 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	4a48      	ldr	r2, [pc, #288]	; (8003e04 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce8:	4a47      	ldr	r2, [pc, #284]	; (8003e08 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003cea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	333c      	adds	r3, #60	; 0x3c
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	f7fe fd4a 	bl	8002794 <HAL_DMA_Start_IT>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e075      	b.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68da      	ldr	r2, [r3, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d18:	60da      	str	r2, [r3, #12]
      break;
 8003d1a:	e026      	b.n	8003d6a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	4a37      	ldr	r2, [pc, #220]	; (8003e00 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003d22:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	4a36      	ldr	r2, [pc, #216]	; (8003e04 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003d2a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	4a35      	ldr	r2, [pc, #212]	; (8003e08 <HAL_TIM_PWM_Start_DMA+0x334>)
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3340      	adds	r3, #64	; 0x40
 8003d40:	461a      	mov	r2, r3
 8003d42:	887b      	ldrh	r3, [r7, #2]
 8003d44:	f7fe fd26 	bl	8002794 <HAL_DMA_Start_IT>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e051      	b.n	8003df6 <HAL_TIM_PWM_Start_DMA+0x322>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d60:	60da      	str	r2, [r3, #12]
      break;
 8003d62:	e002      	b.n	8003d6a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	75fb      	strb	r3, [r7, #23]
      break;
 8003d68:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d141      	bne.n	8003df4 <HAL_TIM_PWM_Start_DMA+0x320>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f000 fdff 	bl	800497c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a22      	ldr	r2, [pc, #136]	; (8003e0c <HAL_TIM_PWM_Start_DMA+0x338>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d107      	bne.n	8003d98 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d96:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1b      	ldr	r2, [pc, #108]	; (8003e0c <HAL_TIM_PWM_Start_DMA+0x338>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00e      	beq.n	8003dc0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003daa:	d009      	beq.n	8003dc0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <HAL_TIM_PWM_Start_DMA+0x33c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_TIM_PWM_Start_DMA+0x2ec>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a16      	ldr	r2, [pc, #88]	; (8003e14 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d111      	bne.n	8003de4 <HAL_TIM_PWM_Start_DMA+0x310>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b06      	cmp	r3, #6
 8003dd0:	d010      	beq.n	8003df4 <HAL_TIM_PWM_Start_DMA+0x320>
      {
        __HAL_TIM_ENABLE(htim);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0201 	orr.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de2:	e007      	b.n	8003df4 <HAL_TIM_PWM_Start_DMA+0x320>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	0800436d 	.word	0x0800436d
 8003e04:	08004415 	.word	0x08004415
 8003e08:	080042db 	.word	0x080042db
 8003e0c:	40012c00 	.word	0x40012c00
 8003e10:	40000400 	.word	0x40000400
 8003e14:	40000800 	.word	0x40000800

08003e18 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b0c      	cmp	r3, #12
 8003e2a:	d855      	bhi.n	8003ed8 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003e2c:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003e69 	.word	0x08003e69
 8003e38:	08003ed9 	.word	0x08003ed9
 8003e3c:	08003ed9 	.word	0x08003ed9
 8003e40:	08003ed9 	.word	0x08003ed9
 8003e44:	08003e85 	.word	0x08003e85
 8003e48:	08003ed9 	.word	0x08003ed9
 8003e4c:	08003ed9 	.word	0x08003ed9
 8003e50:	08003ed9 	.word	0x08003ed9
 8003e54:	08003ea1 	.word	0x08003ea1
 8003e58:	08003ed9 	.word	0x08003ed9
 8003e5c:	08003ed9 	.word	0x08003ed9
 8003e60:	08003ed9 	.word	0x08003ed9
 8003e64:	08003ebd 	.word	0x08003ebd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe fce9 	bl	8002854 <HAL_DMA_Abort_IT>
      break;
 8003e82:	e02c      	b.n	8003ede <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe fcdb 	bl	8002854 <HAL_DMA_Abort_IT>
      break;
 8003e9e:	e01e      	b.n	8003ede <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fe fccd 	bl	8002854 <HAL_DMA_Abort_IT>
      break;
 8003eba:	e010      	b.n	8003ede <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003eca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fe fcbf 	bl	8002854 <HAL_DMA_Abort_IT>
      break;
 8003ed6:	e002      	b.n	8003ede <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
      break;
 8003edc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d157      	bne.n	8003f94 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	6839      	ldr	r1, [r7, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fd45 	bl	800497c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a2a      	ldr	r2, [pc, #168]	; (8003fa0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d117      	bne.n	8003f2c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6a1a      	ldr	r2, [r3, #32]
 8003f02:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f06:	4013      	ands	r3, r2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10f      	bne.n	8003f2c <HAL_TIM_PWM_Stop_DMA+0x114>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6a1a      	ldr	r2, [r3, #32]
 8003f12:	f240 4344 	movw	r3, #1092	; 0x444
 8003f16:	4013      	ands	r3, r2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d107      	bne.n	8003f2c <HAL_TIM_PWM_Stop_DMA+0x114>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f2a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6a1a      	ldr	r2, [r3, #32]
 8003f32:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10f      	bne.n	8003f5c <HAL_TIM_PWM_Stop_DMA+0x144>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6a1a      	ldr	r2, [r3, #32]
 8003f42:	f240 4344 	movw	r3, #1092	; 0x444
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d107      	bne.n	8003f5c <HAL_TIM_PWM_Stop_DMA+0x144>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0201 	bic.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d104      	bne.n	8003f6c <HAL_TIM_PWM_Stop_DMA+0x154>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f6a:	e013      	b.n	8003f94 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d104      	bne.n	8003f7c <HAL_TIM_PWM_Stop_DMA+0x164>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f7a:	e00b      	b.n	8003f94 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d104      	bne.n	8003f8c <HAL_TIM_PWM_Stop_DMA+0x174>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f8a:	e003      	b.n	8003f94 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40012c00 	.word	0x40012c00

08003fa4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d101      	bne.n	8003fc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e0ae      	b.n	8004120 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b0c      	cmp	r3, #12
 8003fce:	f200 809f 	bhi.w	8004110 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fd2:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd8:	0800400d 	.word	0x0800400d
 8003fdc:	08004111 	.word	0x08004111
 8003fe0:	08004111 	.word	0x08004111
 8003fe4:	08004111 	.word	0x08004111
 8003fe8:	0800404d 	.word	0x0800404d
 8003fec:	08004111 	.word	0x08004111
 8003ff0:	08004111 	.word	0x08004111
 8003ff4:	08004111 	.word	0x08004111
 8003ff8:	0800408f 	.word	0x0800408f
 8003ffc:	08004111 	.word	0x08004111
 8004000:	08004111 	.word	0x08004111
 8004004:	08004111 	.word	0x08004111
 8004008:	080040cf 	.word	0x080040cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fa94 	bl	8004540 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699a      	ldr	r2, [r3, #24]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0208 	orr.w	r2, r2, #8
 8004026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699a      	ldr	r2, [r3, #24]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0204 	bic.w	r2, r2, #4
 8004036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6999      	ldr	r1, [r3, #24]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	619a      	str	r2, [r3, #24]
      break;
 800404a:	e064      	b.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fada 	bl	800460c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699a      	ldr	r2, [r3, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	699a      	ldr	r2, [r3, #24]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6999      	ldr	r1, [r3, #24]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	021a      	lsls	r2, r3, #8
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	619a      	str	r2, [r3, #24]
      break;
 800408c:	e043      	b.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fb23 	bl	80046e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69da      	ldr	r2, [r3, #28]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0208 	orr.w	r2, r2, #8
 80040a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	69da      	ldr	r2, [r3, #28]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0204 	bic.w	r2, r2, #4
 80040b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69d9      	ldr	r1, [r3, #28]
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	61da      	str	r2, [r3, #28]
      break;
 80040cc:	e023      	b.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fb6d 	bl	80047b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	69da      	ldr	r2, [r3, #28]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	69d9      	ldr	r1, [r3, #28]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	021a      	lsls	r2, r3, #8
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	61da      	str	r2, [r3, #28]
      break;
 800410e:	e002      	b.n	8004116 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	75fb      	strb	r3, [r7, #23]
      break;
 8004114:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800411e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_TIM_ConfigClockSource+0x1c>
 8004140:	2302      	movs	r3, #2
 8004142:	e0b4      	b.n	80042ae <HAL_TIM_ConfigClockSource+0x186>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800416a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800417c:	d03e      	beq.n	80041fc <HAL_TIM_ConfigClockSource+0xd4>
 800417e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004182:	f200 8087 	bhi.w	8004294 <HAL_TIM_ConfigClockSource+0x16c>
 8004186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800418a:	f000 8086 	beq.w	800429a <HAL_TIM_ConfigClockSource+0x172>
 800418e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004192:	d87f      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x16c>
 8004194:	2b70      	cmp	r3, #112	; 0x70
 8004196:	d01a      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0xa6>
 8004198:	2b70      	cmp	r3, #112	; 0x70
 800419a:	d87b      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x16c>
 800419c:	2b60      	cmp	r3, #96	; 0x60
 800419e:	d050      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x11a>
 80041a0:	2b60      	cmp	r3, #96	; 0x60
 80041a2:	d877      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x16c>
 80041a4:	2b50      	cmp	r3, #80	; 0x50
 80041a6:	d03c      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0xfa>
 80041a8:	2b50      	cmp	r3, #80	; 0x50
 80041aa:	d873      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x16c>
 80041ac:	2b40      	cmp	r3, #64	; 0x40
 80041ae:	d058      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0x13a>
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d86f      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x16c>
 80041b4:	2b30      	cmp	r3, #48	; 0x30
 80041b6:	d064      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x15a>
 80041b8:	2b30      	cmp	r3, #48	; 0x30
 80041ba:	d86b      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x16c>
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d060      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x15a>
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d867      	bhi.n	8004294 <HAL_TIM_ConfigClockSource+0x16c>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d05c      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x15a>
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d05a      	beq.n	8004282 <HAL_TIM_ConfigClockSource+0x15a>
 80041cc:	e062      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041de:	f000 fbae 	bl	800493e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	609a      	str	r2, [r3, #8]
      break;
 80041fa:	e04f      	b.n	800429c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800420c:	f000 fb97 	bl	800493e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800421e:	609a      	str	r2, [r3, #8]
      break;
 8004220:	e03c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800422e:	461a      	mov	r2, r3
 8004230:	f000 fb0e 	bl	8004850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2150      	movs	r1, #80	; 0x50
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fb65 	bl	800490a <TIM_ITRx_SetConfig>
      break;
 8004240:	e02c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800424e:	461a      	mov	r2, r3
 8004250:	f000 fb2c 	bl	80048ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2160      	movs	r1, #96	; 0x60
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fb55 	bl	800490a <TIM_ITRx_SetConfig>
      break;
 8004260:	e01c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800426e:	461a      	mov	r2, r3
 8004270:	f000 faee 	bl	8004850 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2140      	movs	r1, #64	; 0x40
 800427a:	4618      	mov	r0, r3
 800427c:	f000 fb45 	bl	800490a <TIM_ITRx_SetConfig>
      break;
 8004280:	e00c      	b.n	800429c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4619      	mov	r1, r3
 800428c:	4610      	mov	r0, r2
 800428e:	f000 fb3c 	bl	800490a <TIM_ITRx_SetConfig>
      break;
 8004292:	e003      	b.n	800429c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      break;
 8004298:	e000      	b.n	800429c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800429a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b083      	sub	sp, #12
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bc80      	pop	{r7}
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr

080042da <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b084      	sub	sp, #16
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d107      	bne.n	8004302 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004300:	e02a      	b.n	8004358 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	429a      	cmp	r2, r3
 800430a:	d107      	bne.n	800431c <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2202      	movs	r2, #2
 8004310:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800431a:	e01d      	b.n	8004358 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	429a      	cmp	r2, r3
 8004324:	d107      	bne.n	8004336 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2204      	movs	r2, #4
 800432a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004334:	e010      	b.n	8004358 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	429a      	cmp	r2, r3
 800433e:	d107      	bne.n	8004350 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2208      	movs	r2, #8
 8004344:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800434e:	e003      	b.n	8004358 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f7ff ffb5 	bl	80042c8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
}
 8004364:	bf00      	nop
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	429a      	cmp	r2, r3
 8004382:	d10b      	bne.n	800439c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d136      	bne.n	8004400 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800439a:	e031      	b.n	8004400 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d10b      	bne.n	80043be <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2202      	movs	r2, #2
 80043aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d125      	bne.n	8004400 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043bc:	e020      	b.n	8004400 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d10b      	bne.n	80043e0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2204      	movs	r2, #4
 80043cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d114      	bne.n	8004400 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043de:	e00f      	b.n	8004400 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d10a      	bne.n	8004400 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2208      	movs	r2, #8
 80043ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d103      	bne.n	8004400 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f7fd f93f 	bl	8001684 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	771a      	strb	r2, [r3, #28]
}
 800440c:	bf00      	nop
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	d103      	bne.n	8004434 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	771a      	strb	r2, [r3, #28]
 8004432:	e019      	b.n	8004468 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	429a      	cmp	r2, r3
 800443c:	d103      	bne.n	8004446 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2202      	movs	r2, #2
 8004442:	771a      	strb	r2, [r3, #28]
 8004444:	e010      	b.n	8004468 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	d103      	bne.n	8004458 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2204      	movs	r2, #4
 8004454:	771a      	strb	r2, [r3, #28]
 8004456:	e007      	b.n	8004468 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	429a      	cmp	r2, r3
 8004460:	d102      	bne.n	8004468 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2208      	movs	r2, #8
 8004466:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f7ff ff24 	bl	80042b6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
}
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a29      	ldr	r2, [pc, #164]	; (8004534 <TIM_Base_SetConfig+0xb8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00b      	beq.n	80044ac <TIM_Base_SetConfig+0x30>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449a:	d007      	beq.n	80044ac <TIM_Base_SetConfig+0x30>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a26      	ldr	r2, [pc, #152]	; (8004538 <TIM_Base_SetConfig+0xbc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_Base_SetConfig+0x30>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a25      	ldr	r2, [pc, #148]	; (800453c <TIM_Base_SetConfig+0xc0>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d108      	bne.n	80044be <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a1c      	ldr	r2, [pc, #112]	; (8004534 <TIM_Base_SetConfig+0xb8>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d00b      	beq.n	80044de <TIM_Base_SetConfig+0x62>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044cc:	d007      	beq.n	80044de <TIM_Base_SetConfig+0x62>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a19      	ldr	r2, [pc, #100]	; (8004538 <TIM_Base_SetConfig+0xbc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d003      	beq.n	80044de <TIM_Base_SetConfig+0x62>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a18      	ldr	r2, [pc, #96]	; (800453c <TIM_Base_SetConfig+0xc0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d108      	bne.n	80044f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4a07      	ldr	r2, [pc, #28]	; (8004534 <TIM_Base_SetConfig+0xb8>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d103      	bne.n	8004524 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	615a      	str	r2, [r3, #20]
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40000400 	.word	0x40000400
 800453c:	40000800 	.word	0x40000800

08004540 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f023 0201 	bic.w	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f023 0302 	bic.w	r3, r3, #2
 8004588:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a1c      	ldr	r2, [pc, #112]	; (8004608 <TIM_OC1_SetConfig+0xc8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d10c      	bne.n	80045b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f023 0308 	bic.w	r3, r3, #8
 80045a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f023 0304 	bic.w	r3, r3, #4
 80045b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a13      	ldr	r2, [pc, #76]	; (8004608 <TIM_OC1_SetConfig+0xc8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d111      	bne.n	80045e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	4313      	orrs	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	40012c00 	.word	0x40012c00

0800460c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	f023 0210 	bic.w	r2, r3, #16
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800463a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0320 	bic.w	r3, r3, #32
 8004656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <TIM_OC2_SetConfig+0xd0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d10d      	bne.n	8004688 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004672:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004686:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a14      	ldr	r2, [pc, #80]	; (80046dc <TIM_OC2_SetConfig+0xd0>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d113      	bne.n	80046b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004696:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800469e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	40012c00 	.word	0x40012c00

080046e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f023 0303 	bic.w	r3, r3, #3
 8004716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	021b      	lsls	r3, r3, #8
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	4313      	orrs	r3, r2
 8004734:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1d      	ldr	r2, [pc, #116]	; (80047b0 <TIM_OC3_SetConfig+0xd0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d10d      	bne.n	800475a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004744:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a14      	ldr	r2, [pc, #80]	; (80047b0 <TIM_OC3_SetConfig+0xd0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d113      	bne.n	800478a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	621a      	str	r2, [r3, #32]
}
 80047a4:	bf00      	nop
 80047a6:	371c      	adds	r7, #28
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40012c00 	.word	0x40012c00

080047b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	021b      	lsls	r3, r3, #8
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	031b      	lsls	r3, r3, #12
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a0f      	ldr	r2, [pc, #60]	; (800484c <TIM_OC4_SetConfig+0x98>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d109      	bne.n	8004828 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800481a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	019b      	lsls	r3, r3, #6
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	4313      	orrs	r3, r2
 8004826:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	bc80      	pop	{r7}
 800484a:	4770      	bx	lr
 800484c:	40012c00 	.word	0x40012c00

08004850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	f023 0201 	bic.w	r2, r3, #1
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800487a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f023 030a 	bic.w	r3, r3, #10
 800488c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	621a      	str	r2, [r3, #32]
}
 80048a2:	bf00      	nop
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr

080048ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0210 	bic.w	r2, r3, #16
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	031b      	lsls	r3, r3, #12
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	621a      	str	r2, [r3, #32]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr

0800490a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4313      	orrs	r3, r2
 8004928:	f043 0307 	orr.w	r3, r3, #7
 800492c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	609a      	str	r2, [r3, #8]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr

0800493e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800493e:	b480      	push	{r7}
 8004940:	b087      	sub	sp, #28
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004958:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	021a      	lsls	r2, r3, #8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	431a      	orrs	r2, r3
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	4313      	orrs	r3, r2
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	609a      	str	r2, [r3, #8]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr

0800497c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800497c:	b480      	push	{r7}
 800497e:	b087      	sub	sp, #28
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 031f 	and.w	r3, r3, #31
 800498e:	2201      	movs	r2, #1
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a1a      	ldr	r2, [r3, #32]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	43db      	mvns	r3, r3
 800499e:	401a      	ands	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1a      	ldr	r2, [r3, #32]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f003 031f 	and.w	r3, r3, #31
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	fa01 f303 	lsl.w	r3, r1, r3
 80049b4:	431a      	orrs	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr

080049c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d8:	2302      	movs	r3, #2
 80049da:	e046      	b.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a16      	ldr	r2, [pc, #88]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d00e      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a28:	d009      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d004      	beq.n	8004a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a10      	ldr	r2, [pc, #64]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d10c      	bne.n	8004a58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bc80      	pop	{r7}
 8004a72:	4770      	bx	lr
 8004a74:	40012c00 	.word	0x40012c00
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800

08004a80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e03d      	b.n	8004b18 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr

08004b22 <memset>:
 8004b22:	4603      	mov	r3, r0
 8004b24:	4402      	add	r2, r0
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d100      	bne.n	8004b2c <memset+0xa>
 8004b2a:	4770      	bx	lr
 8004b2c:	f803 1b01 	strb.w	r1, [r3], #1
 8004b30:	e7f9      	b.n	8004b26 <memset+0x4>
	...

08004b34 <__libc_init_array>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	2600      	movs	r6, #0
 8004b38:	4d0c      	ldr	r5, [pc, #48]	; (8004b6c <__libc_init_array+0x38>)
 8004b3a:	4c0d      	ldr	r4, [pc, #52]	; (8004b70 <__libc_init_array+0x3c>)
 8004b3c:	1b64      	subs	r4, r4, r5
 8004b3e:	10a4      	asrs	r4, r4, #2
 8004b40:	42a6      	cmp	r6, r4
 8004b42:	d109      	bne.n	8004b58 <__libc_init_array+0x24>
 8004b44:	f001 f874 	bl	8005c30 <_init>
 8004b48:	2600      	movs	r6, #0
 8004b4a:	4d0a      	ldr	r5, [pc, #40]	; (8004b74 <__libc_init_array+0x40>)
 8004b4c:	4c0a      	ldr	r4, [pc, #40]	; (8004b78 <__libc_init_array+0x44>)
 8004b4e:	1b64      	subs	r4, r4, r5
 8004b50:	10a4      	asrs	r4, r4, #2
 8004b52:	42a6      	cmp	r6, r4
 8004b54:	d105      	bne.n	8004b62 <__libc_init_array+0x2e>
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b5c:	4798      	blx	r3
 8004b5e:	3601      	adds	r6, #1
 8004b60:	e7ee      	b.n	8004b40 <__libc_init_array+0xc>
 8004b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b66:	4798      	blx	r3
 8004b68:	3601      	adds	r6, #1
 8004b6a:	e7f2      	b.n	8004b52 <__libc_init_array+0x1e>
 8004b6c:	08005e60 	.word	0x08005e60
 8004b70:	08005e60 	.word	0x08005e60
 8004b74:	08005e60 	.word	0x08005e60
 8004b78:	08005e64 	.word	0x08005e64

08004b7c <tan>:
 8004b7c:	b530      	push	{r4, r5, lr}
 8004b7e:	4a12      	ldr	r2, [pc, #72]	; (8004bc8 <tan+0x4c>)
 8004b80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b84:	4293      	cmp	r3, r2
 8004b86:	b087      	sub	sp, #28
 8004b88:	dc06      	bgt.n	8004b98 <tan+0x1c>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2300      	movs	r3, #0
 8004b92:	f000 f81d 	bl	8004bd0 <__kernel_tan>
 8004b96:	e006      	b.n	8004ba6 <tan+0x2a>
 8004b98:	4a0c      	ldr	r2, [pc, #48]	; (8004bcc <tan+0x50>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	dd05      	ble.n	8004baa <tan+0x2e>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	f7fb fad9 	bl	8000158 <__aeabi_dsub>
 8004ba6:	b007      	add	sp, #28
 8004ba8:	bd30      	pop	{r4, r5, pc}
 8004baa:	aa02      	add	r2, sp, #8
 8004bac:	f000 fa0c 	bl	8004fc8 <__ieee754_rem_pio2>
 8004bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bb4:	0040      	lsls	r0, r0, #1
 8004bb6:	f000 0002 	and.w	r0, r0, #2
 8004bba:	f1c0 0001 	rsb	r0, r0, #1
 8004bbe:	9000      	str	r0, [sp, #0]
 8004bc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bc4:	e7e5      	b.n	8004b92 <tan+0x16>
 8004bc6:	bf00      	nop
 8004bc8:	3fe921fb 	.word	0x3fe921fb
 8004bcc:	7fefffff 	.word	0x7fefffff

08004bd0 <__kernel_tan>:
 8004bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	b08b      	sub	sp, #44	; 0x2c
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	4bd9      	ldr	r3, [pc, #868]	; (8004f40 <__kernel_tan+0x370>)
 8004bda:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004bde:	429e      	cmp	r6, r3
 8004be0:	4604      	mov	r4, r0
 8004be2:	460d      	mov	r5, r1
 8004be4:	4682      	mov	sl, r0
 8004be6:	468b      	mov	fp, r1
 8004be8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004bea:	9202      	str	r2, [sp, #8]
 8004bec:	9107      	str	r1, [sp, #28]
 8004bee:	dc58      	bgt.n	8004ca2 <__kernel_tan+0xd2>
 8004bf0:	f7fb ff04 	bl	80009fc <__aeabi_d2iz>
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	d178      	bne.n	8004cec <__kernel_tan+0x11c>
 8004bfa:	1c7b      	adds	r3, r7, #1
 8004bfc:	4323      	orrs	r3, r4
 8004bfe:	4333      	orrs	r3, r6
 8004c00:	d110      	bne.n	8004c24 <__kernel_tan+0x54>
 8004c02:	4620      	mov	r0, r4
 8004c04:	4659      	mov	r1, fp
 8004c06:	f000 fbd3 	bl	80053b0 <fabs>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	2000      	movs	r0, #0
 8004c10:	49cc      	ldr	r1, [pc, #816]	; (8004f44 <__kernel_tan+0x374>)
 8004c12:	f7fb fd83 	bl	800071c <__aeabi_ddiv>
 8004c16:	4682      	mov	sl, r0
 8004c18:	468b      	mov	fp, r1
 8004c1a:	4650      	mov	r0, sl
 8004c1c:	4659      	mov	r1, fp
 8004c1e:	b00b      	add	sp, #44	; 0x2c
 8004c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c24:	2f01      	cmp	r7, #1
 8004c26:	d0f8      	beq.n	8004c1a <__kernel_tan+0x4a>
 8004c28:	4620      	mov	r0, r4
 8004c2a:	4659      	mov	r1, fp
 8004c2c:	9a02      	ldr	r2, [sp, #8]
 8004c2e:	9b00      	ldr	r3, [sp, #0]
 8004c30:	f7fb fa94 	bl	800015c <__adddf3>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	460f      	mov	r7, r1
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	49c2      	ldr	r1, [pc, #776]	; (8004f48 <__kernel_tan+0x378>)
 8004c3e:	f7fb fd6d 	bl	800071c <__aeabi_ddiv>
 8004c42:	462e      	mov	r6, r5
 8004c44:	4689      	mov	r9, r1
 8004c46:	4652      	mov	r2, sl
 8004c48:	465b      	mov	r3, fp
 8004c4a:	4680      	mov	r8, r0
 8004c4c:	462c      	mov	r4, r5
 8004c4e:	4630      	mov	r0, r6
 8004c50:	460d      	mov	r5, r1
 8004c52:	4639      	mov	r1, r7
 8004c54:	f7fb fa80 	bl	8000158 <__aeabi_dsub>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	9802      	ldr	r0, [sp, #8]
 8004c5e:	9900      	ldr	r1, [sp, #0]
 8004c60:	f7fb fa7a 	bl	8000158 <__aeabi_dsub>
 8004c64:	4632      	mov	r2, r6
 8004c66:	464b      	mov	r3, r9
 8004c68:	f7fb fc2e 	bl	80004c8 <__aeabi_dmul>
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	4682      	mov	sl, r0
 8004c70:	468b      	mov	fp, r1
 8004c72:	464b      	mov	r3, r9
 8004c74:	4630      	mov	r0, r6
 8004c76:	4639      	mov	r1, r7
 8004c78:	f7fb fc26 	bl	80004c8 <__aeabi_dmul>
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	4bb1      	ldr	r3, [pc, #708]	; (8004f44 <__kernel_tan+0x374>)
 8004c80:	f7fb fa6c 	bl	800015c <__adddf3>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4650      	mov	r0, sl
 8004c8a:	4659      	mov	r1, fp
 8004c8c:	f7fb fa66 	bl	800015c <__adddf3>
 8004c90:	4642      	mov	r2, r8
 8004c92:	464b      	mov	r3, r9
 8004c94:	f7fb fc18 	bl	80004c8 <__aeabi_dmul>
 8004c98:	4622      	mov	r2, r4
 8004c9a:	462b      	mov	r3, r5
 8004c9c:	f7fb fa5e 	bl	800015c <__adddf3>
 8004ca0:	e7b9      	b.n	8004c16 <__kernel_tan+0x46>
 8004ca2:	4baa      	ldr	r3, [pc, #680]	; (8004f4c <__kernel_tan+0x37c>)
 8004ca4:	429e      	cmp	r6, r3
 8004ca6:	dd21      	ble.n	8004cec <__kernel_tan+0x11c>
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	da06      	bge.n	8004cba <__kernel_tan+0xea>
 8004cac:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004cb0:	469b      	mov	fp, r3
 8004cb2:	9b00      	ldr	r3, [sp, #0]
 8004cb4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	4652      	mov	r2, sl
 8004cbc:	a182      	add	r1, pc, #520	; (adr r1, 8004ec8 <__kernel_tan+0x2f8>)
 8004cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cc2:	465b      	mov	r3, fp
 8004cc4:	f7fb fa48 	bl	8000158 <__aeabi_dsub>
 8004cc8:	4604      	mov	r4, r0
 8004cca:	460d      	mov	r5, r1
 8004ccc:	a180      	add	r1, pc, #512	; (adr r1, 8004ed0 <__kernel_tan+0x300>)
 8004cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004cd2:	9a02      	ldr	r2, [sp, #8]
 8004cd4:	9b00      	ldr	r3, [sp, #0]
 8004cd6:	f7fb fa3f 	bl	8000158 <__aeabi_dsub>
 8004cda:	462b      	mov	r3, r5
 8004cdc:	4622      	mov	r2, r4
 8004cde:	f7fb fa3d 	bl	800015c <__adddf3>
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	4682      	mov	sl, r0
 8004ce6:	468b      	mov	fp, r1
 8004ce8:	9302      	str	r3, [sp, #8]
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	4652      	mov	r2, sl
 8004cee:	465b      	mov	r3, fp
 8004cf0:	4650      	mov	r0, sl
 8004cf2:	4659      	mov	r1, fp
 8004cf4:	f7fb fbe8 	bl	80004c8 <__aeabi_dmul>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4680      	mov	r8, r0
 8004cfe:	4689      	mov	r9, r1
 8004d00:	f7fb fbe2 	bl	80004c8 <__aeabi_dmul>
 8004d04:	4642      	mov	r2, r8
 8004d06:	4604      	mov	r4, r0
 8004d08:	460d      	mov	r5, r1
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	4650      	mov	r0, sl
 8004d0e:	4659      	mov	r1, fp
 8004d10:	f7fb fbda 	bl	80004c8 <__aeabi_dmul>
 8004d14:	a370      	add	r3, pc, #448	; (adr r3, 8004ed8 <__kernel_tan+0x308>)
 8004d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d1e:	4620      	mov	r0, r4
 8004d20:	4629      	mov	r1, r5
 8004d22:	f7fb fbd1 	bl	80004c8 <__aeabi_dmul>
 8004d26:	a36e      	add	r3, pc, #440	; (adr r3, 8004ee0 <__kernel_tan+0x310>)
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f7fb fa16 	bl	800015c <__adddf3>
 8004d30:	4622      	mov	r2, r4
 8004d32:	462b      	mov	r3, r5
 8004d34:	f7fb fbc8 	bl	80004c8 <__aeabi_dmul>
 8004d38:	a36b      	add	r3, pc, #428	; (adr r3, 8004ee8 <__kernel_tan+0x318>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fa0d 	bl	800015c <__adddf3>
 8004d42:	4622      	mov	r2, r4
 8004d44:	462b      	mov	r3, r5
 8004d46:	f7fb fbbf 	bl	80004c8 <__aeabi_dmul>
 8004d4a:	a369      	add	r3, pc, #420	; (adr r3, 8004ef0 <__kernel_tan+0x320>)
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f7fb fa04 	bl	800015c <__adddf3>
 8004d54:	4622      	mov	r2, r4
 8004d56:	462b      	mov	r3, r5
 8004d58:	f7fb fbb6 	bl	80004c8 <__aeabi_dmul>
 8004d5c:	a366      	add	r3, pc, #408	; (adr r3, 8004ef8 <__kernel_tan+0x328>)
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f7fb f9fb 	bl	800015c <__adddf3>
 8004d66:	4622      	mov	r2, r4
 8004d68:	462b      	mov	r3, r5
 8004d6a:	f7fb fbad 	bl	80004c8 <__aeabi_dmul>
 8004d6e:	a364      	add	r3, pc, #400	; (adr r3, 8004f00 <__kernel_tan+0x330>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f7fb f9f2 	bl	800015c <__adddf3>
 8004d78:	4642      	mov	r2, r8
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	f7fb fba4 	bl	80004c8 <__aeabi_dmul>
 8004d80:	a361      	add	r3, pc, #388	; (adr r3, 8004f08 <__kernel_tan+0x338>)
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f7fb fb9b 	bl	80004c8 <__aeabi_dmul>
 8004d92:	a35f      	add	r3, pc, #380	; (adr r3, 8004f10 <__kernel_tan+0x340>)
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	f7fb f9e0 	bl	800015c <__adddf3>
 8004d9c:	4622      	mov	r2, r4
 8004d9e:	462b      	mov	r3, r5
 8004da0:	f7fb fb92 	bl	80004c8 <__aeabi_dmul>
 8004da4:	a35c      	add	r3, pc, #368	; (adr r3, 8004f18 <__kernel_tan+0x348>)
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f7fb f9d7 	bl	800015c <__adddf3>
 8004dae:	4622      	mov	r2, r4
 8004db0:	462b      	mov	r3, r5
 8004db2:	f7fb fb89 	bl	80004c8 <__aeabi_dmul>
 8004db6:	a35a      	add	r3, pc, #360	; (adr r3, 8004f20 <__kernel_tan+0x350>)
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f7fb f9ce 	bl	800015c <__adddf3>
 8004dc0:	4622      	mov	r2, r4
 8004dc2:	462b      	mov	r3, r5
 8004dc4:	f7fb fb80 	bl	80004c8 <__aeabi_dmul>
 8004dc8:	a357      	add	r3, pc, #348	; (adr r3, 8004f28 <__kernel_tan+0x358>)
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	f7fb f9c5 	bl	800015c <__adddf3>
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	f7fb fb77 	bl	80004c8 <__aeabi_dmul>
 8004dda:	a355      	add	r3, pc, #340	; (adr r3, 8004f30 <__kernel_tan+0x360>)
 8004ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de0:	f7fb f9bc 	bl	800015c <__adddf3>
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004dec:	f7fb f9b6 	bl	800015c <__adddf3>
 8004df0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004df4:	f7fb fb68 	bl	80004c8 <__aeabi_dmul>
 8004df8:	9a02      	ldr	r2, [sp, #8]
 8004dfa:	9b00      	ldr	r3, [sp, #0]
 8004dfc:	f7fb f9ae 	bl	800015c <__adddf3>
 8004e00:	4642      	mov	r2, r8
 8004e02:	464b      	mov	r3, r9
 8004e04:	f7fb fb60 	bl	80004c8 <__aeabi_dmul>
 8004e08:	9a02      	ldr	r2, [sp, #8]
 8004e0a:	9b00      	ldr	r3, [sp, #0]
 8004e0c:	f7fb f9a6 	bl	800015c <__adddf3>
 8004e10:	a349      	add	r3, pc, #292	; (adr r3, 8004f38 <__kernel_tan+0x368>)
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	4604      	mov	r4, r0
 8004e18:	460d      	mov	r5, r1
 8004e1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e1e:	f7fb fb53 	bl	80004c8 <__aeabi_dmul>
 8004e22:	4622      	mov	r2, r4
 8004e24:	462b      	mov	r3, r5
 8004e26:	f7fb f999 	bl	800015c <__adddf3>
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	e9cd 0100 	strd	r0, r1, [sp]
 8004e30:	4602      	mov	r2, r0
 8004e32:	4659      	mov	r1, fp
 8004e34:	4650      	mov	r0, sl
 8004e36:	f7fb f991 	bl	800015c <__adddf3>
 8004e3a:	4b44      	ldr	r3, [pc, #272]	; (8004f4c <__kernel_tan+0x37c>)
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	429e      	cmp	r6, r3
 8004e40:	460d      	mov	r5, r1
 8004e42:	f340 8085 	ble.w	8004f50 <__kernel_tan+0x380>
 8004e46:	4638      	mov	r0, r7
 8004e48:	f7fb fad4 	bl	80003f4 <__aeabi_i2d>
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	4680      	mov	r8, r0
 8004e50:	4689      	mov	r9, r1
 8004e52:	462b      	mov	r3, r5
 8004e54:	4620      	mov	r0, r4
 8004e56:	4629      	mov	r1, r5
 8004e58:	f7fb fb36 	bl	80004c8 <__aeabi_dmul>
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	4606      	mov	r6, r0
 8004e60:	460f      	mov	r7, r1
 8004e62:	464b      	mov	r3, r9
 8004e64:	4620      	mov	r0, r4
 8004e66:	4629      	mov	r1, r5
 8004e68:	f7fb f978 	bl	800015c <__adddf3>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4630      	mov	r0, r6
 8004e72:	4639      	mov	r1, r7
 8004e74:	f7fb fc52 	bl	800071c <__aeabi_ddiv>
 8004e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e7c:	f7fb f96c 	bl	8000158 <__aeabi_dsub>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4650      	mov	r0, sl
 8004e86:	4659      	mov	r1, fp
 8004e88:	f7fb f966 	bl	8000158 <__aeabi_dsub>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	460b      	mov	r3, r1
 8004e90:	f7fb f964 	bl	800015c <__adddf3>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4640      	mov	r0, r8
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	f7fb f95c 	bl	8000158 <__aeabi_dsub>
 8004ea0:	9b07      	ldr	r3, [sp, #28]
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	179b      	asrs	r3, r3, #30
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	f1c3 0001 	rsb	r0, r3, #1
 8004eae:	460d      	mov	r5, r1
 8004eb0:	f7fb faa0 	bl	80003f4 <__aeabi_i2d>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4620      	mov	r0, r4
 8004eba:	4629      	mov	r1, r5
 8004ebc:	f7fb fb04 	bl	80004c8 <__aeabi_dmul>
 8004ec0:	e6a9      	b.n	8004c16 <__kernel_tan+0x46>
 8004ec2:	bf00      	nop
 8004ec4:	f3af 8000 	nop.w
 8004ec8:	54442d18 	.word	0x54442d18
 8004ecc:	3fe921fb 	.word	0x3fe921fb
 8004ed0:	33145c07 	.word	0x33145c07
 8004ed4:	3c81a626 	.word	0x3c81a626
 8004ed8:	74bf7ad4 	.word	0x74bf7ad4
 8004edc:	3efb2a70 	.word	0x3efb2a70
 8004ee0:	32f0a7e9 	.word	0x32f0a7e9
 8004ee4:	3f12b80f 	.word	0x3f12b80f
 8004ee8:	1a8d1068 	.word	0x1a8d1068
 8004eec:	3f3026f7 	.word	0x3f3026f7
 8004ef0:	fee08315 	.word	0xfee08315
 8004ef4:	3f57dbc8 	.word	0x3f57dbc8
 8004ef8:	e96e8493 	.word	0xe96e8493
 8004efc:	3f8226e3 	.word	0x3f8226e3
 8004f00:	1bb341fe 	.word	0x1bb341fe
 8004f04:	3faba1ba 	.word	0x3faba1ba
 8004f08:	db605373 	.word	0xdb605373
 8004f0c:	bef375cb 	.word	0xbef375cb
 8004f10:	a03792a6 	.word	0xa03792a6
 8004f14:	3f147e88 	.word	0x3f147e88
 8004f18:	f2f26501 	.word	0xf2f26501
 8004f1c:	3f4344d8 	.word	0x3f4344d8
 8004f20:	c9560328 	.word	0xc9560328
 8004f24:	3f6d6d22 	.word	0x3f6d6d22
 8004f28:	8406d637 	.word	0x8406d637
 8004f2c:	3f9664f4 	.word	0x3f9664f4
 8004f30:	1110fe7a 	.word	0x1110fe7a
 8004f34:	3fc11111 	.word	0x3fc11111
 8004f38:	55555563 	.word	0x55555563
 8004f3c:	3fd55555 	.word	0x3fd55555
 8004f40:	3e2fffff 	.word	0x3e2fffff
 8004f44:	3ff00000 	.word	0x3ff00000
 8004f48:	bff00000 	.word	0xbff00000
 8004f4c:	3fe59427 	.word	0x3fe59427
 8004f50:	2f01      	cmp	r7, #1
 8004f52:	d031      	beq.n	8004fb8 <__kernel_tan+0x3e8>
 8004f54:	460f      	mov	r7, r1
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	2000      	movs	r0, #0
 8004f5c:	4918      	ldr	r1, [pc, #96]	; (8004fc0 <__kernel_tan+0x3f0>)
 8004f5e:	f7fb fbdd 	bl	800071c <__aeabi_ddiv>
 8004f62:	2600      	movs	r6, #0
 8004f64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004f6c:	4652      	mov	r2, sl
 8004f6e:	465b      	mov	r3, fp
 8004f70:	4630      	mov	r0, r6
 8004f72:	4639      	mov	r1, r7
 8004f74:	f7fb f8f0 	bl	8000158 <__aeabi_dsub>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f80:	f7fb f8ea 	bl	8000158 <__aeabi_dsub>
 8004f84:	4632      	mov	r2, r6
 8004f86:	462b      	mov	r3, r5
 8004f88:	f7fb fa9e 	bl	80004c8 <__aeabi_dmul>
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	4682      	mov	sl, r0
 8004f90:	468b      	mov	fp, r1
 8004f92:	462b      	mov	r3, r5
 8004f94:	4630      	mov	r0, r6
 8004f96:	4639      	mov	r1, r7
 8004f98:	f7fb fa96 	bl	80004c8 <__aeabi_dmul>
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <__kernel_tan+0x3f4>)
 8004fa0:	f7fb f8dc 	bl	800015c <__adddf3>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4650      	mov	r0, sl
 8004faa:	4659      	mov	r1, fp
 8004fac:	f7fb f8d6 	bl	800015c <__adddf3>
 8004fb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fb4:	4634      	mov	r4, r6
 8004fb6:	e66d      	b.n	8004c94 <__kernel_tan+0xc4>
 8004fb8:	4682      	mov	sl, r0
 8004fba:	468b      	mov	fp, r1
 8004fbc:	e62d      	b.n	8004c1a <__kernel_tan+0x4a>
 8004fbe:	bf00      	nop
 8004fc0:	bff00000 	.word	0xbff00000
 8004fc4:	3ff00000 	.word	0x3ff00000

08004fc8 <__ieee754_rem_pio2>:
 8004fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fcc:	4614      	mov	r4, r2
 8004fce:	4ac2      	ldr	r2, [pc, #776]	; (80052d8 <__ieee754_rem_pio2+0x310>)
 8004fd0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8004fd4:	b08d      	sub	sp, #52	; 0x34
 8004fd6:	4592      	cmp	sl, r2
 8004fd8:	9104      	str	r1, [sp, #16]
 8004fda:	dc07      	bgt.n	8004fec <__ieee754_rem_pio2+0x24>
 8004fdc:	2200      	movs	r2, #0
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e9c4 0100 	strd	r0, r1, [r4]
 8004fe4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004fe8:	2500      	movs	r5, #0
 8004fea:	e024      	b.n	8005036 <__ieee754_rem_pio2+0x6e>
 8004fec:	4abb      	ldr	r2, [pc, #748]	; (80052dc <__ieee754_rem_pio2+0x314>)
 8004fee:	4592      	cmp	sl, r2
 8004ff0:	dc72      	bgt.n	80050d8 <__ieee754_rem_pio2+0x110>
 8004ff2:	9b04      	ldr	r3, [sp, #16]
 8004ff4:	4dba      	ldr	r5, [pc, #744]	; (80052e0 <__ieee754_rem_pio2+0x318>)
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	a3a9      	add	r3, pc, #676	; (adr r3, 80052a0 <__ieee754_rem_pio2+0x2d8>)
 8004ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ffe:	dd36      	ble.n	800506e <__ieee754_rem_pio2+0xa6>
 8005000:	f7fb f8aa 	bl	8000158 <__aeabi_dsub>
 8005004:	45aa      	cmp	sl, r5
 8005006:	4606      	mov	r6, r0
 8005008:	460f      	mov	r7, r1
 800500a:	d018      	beq.n	800503e <__ieee754_rem_pio2+0x76>
 800500c:	a3a6      	add	r3, pc, #664	; (adr r3, 80052a8 <__ieee754_rem_pio2+0x2e0>)
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	f7fb f8a1 	bl	8000158 <__aeabi_dsub>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4630      	mov	r0, r6
 800501c:	e9c4 2300 	strd	r2, r3, [r4]
 8005020:	4639      	mov	r1, r7
 8005022:	f7fb f899 	bl	8000158 <__aeabi_dsub>
 8005026:	a3a0      	add	r3, pc, #640	; (adr r3, 80052a8 <__ieee754_rem_pio2+0x2e0>)
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f7fb f894 	bl	8000158 <__aeabi_dsub>
 8005030:	2501      	movs	r5, #1
 8005032:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005036:	4628      	mov	r0, r5
 8005038:	b00d      	add	sp, #52	; 0x34
 800503a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800503e:	a39c      	add	r3, pc, #624	; (adr r3, 80052b0 <__ieee754_rem_pio2+0x2e8>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f7fb f888 	bl	8000158 <__aeabi_dsub>
 8005048:	a39b      	add	r3, pc, #620	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2f0>)
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	4606      	mov	r6, r0
 8005050:	460f      	mov	r7, r1
 8005052:	f7fb f881 	bl	8000158 <__aeabi_dsub>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4630      	mov	r0, r6
 800505c:	e9c4 2300 	strd	r2, r3, [r4]
 8005060:	4639      	mov	r1, r7
 8005062:	f7fb f879 	bl	8000158 <__aeabi_dsub>
 8005066:	a394      	add	r3, pc, #592	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2f0>)
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	e7de      	b.n	800502c <__ieee754_rem_pio2+0x64>
 800506e:	f7fb f875 	bl	800015c <__adddf3>
 8005072:	45aa      	cmp	sl, r5
 8005074:	4606      	mov	r6, r0
 8005076:	460f      	mov	r7, r1
 8005078:	d016      	beq.n	80050a8 <__ieee754_rem_pio2+0xe0>
 800507a:	a38b      	add	r3, pc, #556	; (adr r3, 80052a8 <__ieee754_rem_pio2+0x2e0>)
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	f7fb f86c 	bl	800015c <__adddf3>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4630      	mov	r0, r6
 800508a:	e9c4 2300 	strd	r2, r3, [r4]
 800508e:	4639      	mov	r1, r7
 8005090:	f7fb f862 	bl	8000158 <__aeabi_dsub>
 8005094:	a384      	add	r3, pc, #528	; (adr r3, 80052a8 <__ieee754_rem_pio2+0x2e0>)
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	f7fb f85f 	bl	800015c <__adddf3>
 800509e:	f04f 35ff 	mov.w	r5, #4294967295
 80050a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80050a6:	e7c6      	b.n	8005036 <__ieee754_rem_pio2+0x6e>
 80050a8:	a381      	add	r3, pc, #516	; (adr r3, 80052b0 <__ieee754_rem_pio2+0x2e8>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	f7fb f855 	bl	800015c <__adddf3>
 80050b2:	a381      	add	r3, pc, #516	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2f0>)
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	4606      	mov	r6, r0
 80050ba:	460f      	mov	r7, r1
 80050bc:	f7fb f84e 	bl	800015c <__adddf3>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4630      	mov	r0, r6
 80050c6:	e9c4 2300 	strd	r2, r3, [r4]
 80050ca:	4639      	mov	r1, r7
 80050cc:	f7fb f844 	bl	8000158 <__aeabi_dsub>
 80050d0:	a379      	add	r3, pc, #484	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2f0>)
 80050d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d6:	e7e0      	b.n	800509a <__ieee754_rem_pio2+0xd2>
 80050d8:	4a82      	ldr	r2, [pc, #520]	; (80052e4 <__ieee754_rem_pio2+0x31c>)
 80050da:	4592      	cmp	sl, r2
 80050dc:	f300 80d4 	bgt.w	8005288 <__ieee754_rem_pio2+0x2c0>
 80050e0:	f000 f966 	bl	80053b0 <fabs>
 80050e4:	a376      	add	r3, pc, #472	; (adr r3, 80052c0 <__ieee754_rem_pio2+0x2f8>)
 80050e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ea:	4606      	mov	r6, r0
 80050ec:	460f      	mov	r7, r1
 80050ee:	f7fb f9eb 	bl	80004c8 <__aeabi_dmul>
 80050f2:	2200      	movs	r2, #0
 80050f4:	4b7c      	ldr	r3, [pc, #496]	; (80052e8 <__ieee754_rem_pio2+0x320>)
 80050f6:	f7fb f831 	bl	800015c <__adddf3>
 80050fa:	f7fb fc7f 	bl	80009fc <__aeabi_d2iz>
 80050fe:	4605      	mov	r5, r0
 8005100:	f7fb f978 	bl	80003f4 <__aeabi_i2d>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800510c:	a364      	add	r3, pc, #400	; (adr r3, 80052a0 <__ieee754_rem_pio2+0x2d8>)
 800510e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005112:	f7fb f9d9 	bl	80004c8 <__aeabi_dmul>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	4630      	mov	r0, r6
 800511c:	4639      	mov	r1, r7
 800511e:	f7fb f81b 	bl	8000158 <__aeabi_dsub>
 8005122:	a361      	add	r3, pc, #388	; (adr r3, 80052a8 <__ieee754_rem_pio2+0x2e0>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	4680      	mov	r8, r0
 800512a:	4689      	mov	r9, r1
 800512c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005130:	f7fb f9ca 	bl	80004c8 <__aeabi_dmul>
 8005134:	2d1f      	cmp	r5, #31
 8005136:	4606      	mov	r6, r0
 8005138:	460f      	mov	r7, r1
 800513a:	dc0e      	bgt.n	800515a <__ieee754_rem_pio2+0x192>
 800513c:	4b6b      	ldr	r3, [pc, #428]	; (80052ec <__ieee754_rem_pio2+0x324>)
 800513e:	1e6a      	subs	r2, r5, #1
 8005140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005144:	4553      	cmp	r3, sl
 8005146:	d008      	beq.n	800515a <__ieee754_rem_pio2+0x192>
 8005148:	4632      	mov	r2, r6
 800514a:	463b      	mov	r3, r7
 800514c:	4640      	mov	r0, r8
 800514e:	4649      	mov	r1, r9
 8005150:	f7fb f802 	bl	8000158 <__aeabi_dsub>
 8005154:	e9c4 0100 	strd	r0, r1, [r4]
 8005158:	e012      	b.n	8005180 <__ieee754_rem_pio2+0x1b8>
 800515a:	463b      	mov	r3, r7
 800515c:	4632      	mov	r2, r6
 800515e:	4640      	mov	r0, r8
 8005160:	4649      	mov	r1, r9
 8005162:	f7fa fff9 	bl	8000158 <__aeabi_dsub>
 8005166:	ea4f 532a 	mov.w	r3, sl, asr #20
 800516a:	9305      	str	r3, [sp, #20]
 800516c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005170:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 8005174:	2b10      	cmp	r3, #16
 8005176:	dc1f      	bgt.n	80051b8 <__ieee754_rem_pio2+0x1f0>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	e9c4 2300 	strd	r2, r3, [r4]
 8005180:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8005184:	4640      	mov	r0, r8
 8005186:	4653      	mov	r3, sl
 8005188:	4649      	mov	r1, r9
 800518a:	f7fa ffe5 	bl	8000158 <__aeabi_dsub>
 800518e:	4632      	mov	r2, r6
 8005190:	463b      	mov	r3, r7
 8005192:	f7fa ffe1 	bl	8000158 <__aeabi_dsub>
 8005196:	460b      	mov	r3, r1
 8005198:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800519c:	9904      	ldr	r1, [sp, #16]
 800519e:	4602      	mov	r2, r0
 80051a0:	2900      	cmp	r1, #0
 80051a2:	f6bf af48 	bge.w	8005036 <__ieee754_rem_pio2+0x6e>
 80051a6:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 80051aa:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80051ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80051b2:	60e3      	str	r3, [r4, #12]
 80051b4:	426d      	negs	r5, r5
 80051b6:	e73e      	b.n	8005036 <__ieee754_rem_pio2+0x6e>
 80051b8:	a33d      	add	r3, pc, #244	; (adr r3, 80052b0 <__ieee754_rem_pio2+0x2e8>)
 80051ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051c2:	f7fb f981 	bl	80004c8 <__aeabi_dmul>
 80051c6:	4606      	mov	r6, r0
 80051c8:	460f      	mov	r7, r1
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4640      	mov	r0, r8
 80051d0:	4649      	mov	r1, r9
 80051d2:	f7fa ffc1 	bl	8000158 <__aeabi_dsub>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4682      	mov	sl, r0
 80051dc:	468b      	mov	fp, r1
 80051de:	4640      	mov	r0, r8
 80051e0:	4649      	mov	r1, r9
 80051e2:	f7fa ffb9 	bl	8000158 <__aeabi_dsub>
 80051e6:	4632      	mov	r2, r6
 80051e8:	463b      	mov	r3, r7
 80051ea:	f7fa ffb5 	bl	8000158 <__aeabi_dsub>
 80051ee:	a332      	add	r3, pc, #200	; (adr r3, 80052b8 <__ieee754_rem_pio2+0x2f0>)
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	4606      	mov	r6, r0
 80051f6:	460f      	mov	r7, r1
 80051f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051fc:	f7fb f964 	bl	80004c8 <__aeabi_dmul>
 8005200:	4632      	mov	r2, r6
 8005202:	463b      	mov	r3, r7
 8005204:	f7fa ffa8 	bl	8000158 <__aeabi_dsub>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4606      	mov	r6, r0
 800520e:	460f      	mov	r7, r1
 8005210:	4650      	mov	r0, sl
 8005212:	4659      	mov	r1, fp
 8005214:	f7fa ffa0 	bl	8000158 <__aeabi_dsub>
 8005218:	9a05      	ldr	r2, [sp, #20]
 800521a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b31      	cmp	r3, #49	; 0x31
 8005222:	dc06      	bgt.n	8005232 <__ieee754_rem_pio2+0x26a>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	46d0      	mov	r8, sl
 800522a:	46d9      	mov	r9, fp
 800522c:	e9c4 2300 	strd	r2, r3, [r4]
 8005230:	e7a6      	b.n	8005180 <__ieee754_rem_pio2+0x1b8>
 8005232:	a325      	add	r3, pc, #148	; (adr r3, 80052c8 <__ieee754_rem_pio2+0x300>)
 8005234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005238:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800523c:	f7fb f944 	bl	80004c8 <__aeabi_dmul>
 8005240:	4606      	mov	r6, r0
 8005242:	460f      	mov	r7, r1
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4650      	mov	r0, sl
 800524a:	4659      	mov	r1, fp
 800524c:	f7fa ff84 	bl	8000158 <__aeabi_dsub>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4680      	mov	r8, r0
 8005256:	4689      	mov	r9, r1
 8005258:	4650      	mov	r0, sl
 800525a:	4659      	mov	r1, fp
 800525c:	f7fa ff7c 	bl	8000158 <__aeabi_dsub>
 8005260:	4632      	mov	r2, r6
 8005262:	463b      	mov	r3, r7
 8005264:	f7fa ff78 	bl	8000158 <__aeabi_dsub>
 8005268:	a319      	add	r3, pc, #100	; (adr r3, 80052d0 <__ieee754_rem_pio2+0x308>)
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	4606      	mov	r6, r0
 8005270:	460f      	mov	r7, r1
 8005272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005276:	f7fb f927 	bl	80004c8 <__aeabi_dmul>
 800527a:	4632      	mov	r2, r6
 800527c:	463b      	mov	r3, r7
 800527e:	f7fa ff6b 	bl	8000158 <__aeabi_dsub>
 8005282:	4606      	mov	r6, r0
 8005284:	460f      	mov	r7, r1
 8005286:	e75f      	b.n	8005148 <__ieee754_rem_pio2+0x180>
 8005288:	4a19      	ldr	r2, [pc, #100]	; (80052f0 <__ieee754_rem_pio2+0x328>)
 800528a:	4592      	cmp	sl, r2
 800528c:	dd32      	ble.n	80052f4 <__ieee754_rem_pio2+0x32c>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	f7fa ff61 	bl	8000158 <__aeabi_dsub>
 8005296:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800529a:	e9c4 0100 	strd	r0, r1, [r4]
 800529e:	e6a3      	b.n	8004fe8 <__ieee754_rem_pio2+0x20>
 80052a0:	54400000 	.word	0x54400000
 80052a4:	3ff921fb 	.word	0x3ff921fb
 80052a8:	1a626331 	.word	0x1a626331
 80052ac:	3dd0b461 	.word	0x3dd0b461
 80052b0:	1a600000 	.word	0x1a600000
 80052b4:	3dd0b461 	.word	0x3dd0b461
 80052b8:	2e037073 	.word	0x2e037073
 80052bc:	3ba3198a 	.word	0x3ba3198a
 80052c0:	6dc9c883 	.word	0x6dc9c883
 80052c4:	3fe45f30 	.word	0x3fe45f30
 80052c8:	2e000000 	.word	0x2e000000
 80052cc:	3ba3198a 	.word	0x3ba3198a
 80052d0:	252049c1 	.word	0x252049c1
 80052d4:	397b839a 	.word	0x397b839a
 80052d8:	3fe921fb 	.word	0x3fe921fb
 80052dc:	4002d97b 	.word	0x4002d97b
 80052e0:	3ff921fb 	.word	0x3ff921fb
 80052e4:	413921fb 	.word	0x413921fb
 80052e8:	3fe00000 	.word	0x3fe00000
 80052ec:	08005c88 	.word	0x08005c88
 80052f0:	7fefffff 	.word	0x7fefffff
 80052f4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80052f8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80052fc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8005300:	460f      	mov	r7, r1
 8005302:	4606      	mov	r6, r0
 8005304:	f7fb fb7a 	bl	80009fc <__aeabi_d2iz>
 8005308:	f7fb f874 	bl	80003f4 <__aeabi_i2d>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4630      	mov	r0, r6
 8005312:	4639      	mov	r1, r7
 8005314:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005318:	f7fa ff1e 	bl	8000158 <__aeabi_dsub>
 800531c:	2200      	movs	r2, #0
 800531e:	4b22      	ldr	r3, [pc, #136]	; (80053a8 <__ieee754_rem_pio2+0x3e0>)
 8005320:	f7fb f8d2 	bl	80004c8 <__aeabi_dmul>
 8005324:	460f      	mov	r7, r1
 8005326:	4606      	mov	r6, r0
 8005328:	f7fb fb68 	bl	80009fc <__aeabi_d2iz>
 800532c:	f7fb f862 	bl	80003f4 <__aeabi_i2d>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4630      	mov	r0, r6
 8005336:	4639      	mov	r1, r7
 8005338:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800533c:	f7fa ff0c 	bl	8000158 <__aeabi_dsub>
 8005340:	2200      	movs	r2, #0
 8005342:	4b19      	ldr	r3, [pc, #100]	; (80053a8 <__ieee754_rem_pio2+0x3e0>)
 8005344:	f7fb f8c0 	bl	80004c8 <__aeabi_dmul>
 8005348:	f04f 0803 	mov.w	r8, #3
 800534c:	2600      	movs	r6, #0
 800534e:	2700      	movs	r7, #0
 8005350:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005354:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005358:	4632      	mov	r2, r6
 800535a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800535e:	463b      	mov	r3, r7
 8005360:	46c2      	mov	sl, r8
 8005362:	f108 38ff 	add.w	r8, r8, #4294967295
 8005366:	f7fb fb17 	bl	8000998 <__aeabi_dcmpeq>
 800536a:	2800      	cmp	r0, #0
 800536c:	d1f4      	bne.n	8005358 <__ieee754_rem_pio2+0x390>
 800536e:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <__ieee754_rem_pio2+0x3e4>)
 8005370:	462a      	mov	r2, r5
 8005372:	9301      	str	r3, [sp, #4]
 8005374:	2302      	movs	r3, #2
 8005376:	4621      	mov	r1, r4
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	a806      	add	r0, sp, #24
 800537c:	4653      	mov	r3, sl
 800537e:	f000 f81b 	bl	80053b8 <__kernel_rem_pio2>
 8005382:	9b04      	ldr	r3, [sp, #16]
 8005384:	4605      	mov	r5, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	f6bf ae55 	bge.w	8005036 <__ieee754_rem_pio2+0x6e>
 800538c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005390:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005394:	e9c4 2300 	strd	r2, r3, [r4]
 8005398:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800539c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053a0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80053a4:	e706      	b.n	80051b4 <__ieee754_rem_pio2+0x1ec>
 80053a6:	bf00      	nop
 80053a8:	41700000 	.word	0x41700000
 80053ac:	08005d08 	.word	0x08005d08

080053b0 <fabs>:
 80053b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80053b4:	4619      	mov	r1, r3
 80053b6:	4770      	bx	lr

080053b8 <__kernel_rem_pio2>:
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80053c0:	9308      	str	r3, [sp, #32]
 80053c2:	9106      	str	r1, [sp, #24]
 80053c4:	4bb6      	ldr	r3, [pc, #728]	; (80056a0 <__kernel_rem_pio2+0x2e8>)
 80053c6:	99a2      	ldr	r1, [sp, #648]	; 0x288
 80053c8:	f112 0f14 	cmn.w	r2, #20
 80053cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80053d0:	bfa8      	it	ge
 80053d2:	1ed4      	subge	r4, r2, #3
 80053d4:	9302      	str	r3, [sp, #8]
 80053d6:	9b08      	ldr	r3, [sp, #32]
 80053d8:	bfb8      	it	lt
 80053da:	2400      	movlt	r4, #0
 80053dc:	f103 33ff 	add.w	r3, r3, #4294967295
 80053e0:	9307      	str	r3, [sp, #28]
 80053e2:	bfa4      	itt	ge
 80053e4:	2318      	movge	r3, #24
 80053e6:	fb94 f4f3 	sdivge	r4, r4, r3
 80053ea:	f06f 0317 	mvn.w	r3, #23
 80053ee:	fb04 3303 	mla	r3, r4, r3, r3
 80053f2:	eb03 0b02 	add.w	fp, r3, r2
 80053f6:	9a07      	ldr	r2, [sp, #28]
 80053f8:	9b02      	ldr	r3, [sp, #8]
 80053fa:	1aa7      	subs	r7, r4, r2
 80053fc:	eb03 0802 	add.w	r8, r3, r2
 8005400:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005402:	2500      	movs	r5, #0
 8005404:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005408:	2200      	movs	r2, #0
 800540a:	2300      	movs	r3, #0
 800540c:	9009      	str	r0, [sp, #36]	; 0x24
 800540e:	ae20      	add	r6, sp, #128	; 0x80
 8005410:	4545      	cmp	r5, r8
 8005412:	dd14      	ble.n	800543e <__kernel_rem_pio2+0x86>
 8005414:	f04f 0800 	mov.w	r8, #0
 8005418:	9a08      	ldr	r2, [sp, #32]
 800541a:	ab20      	add	r3, sp, #128	; 0x80
 800541c:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8005420:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8005424:	9b02      	ldr	r3, [sp, #8]
 8005426:	4598      	cmp	r8, r3
 8005428:	dc35      	bgt.n	8005496 <__kernel_rem_pio2+0xde>
 800542a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800542c:	2200      	movs	r2, #0
 800542e:	f1a3 0908 	sub.w	r9, r3, #8
 8005432:	2300      	movs	r3, #0
 8005434:	462f      	mov	r7, r5
 8005436:	2600      	movs	r6, #0
 8005438:	e9cd 2300 	strd	r2, r3, [sp]
 800543c:	e01f      	b.n	800547e <__kernel_rem_pio2+0xc6>
 800543e:	42ef      	cmn	r7, r5
 8005440:	d40b      	bmi.n	800545a <__kernel_rem_pio2+0xa2>
 8005442:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005446:	e9cd 2300 	strd	r2, r3, [sp]
 800544a:	f7fa ffd3 	bl	80003f4 <__aeabi_i2d>
 800544e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005452:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005456:	3501      	adds	r5, #1
 8005458:	e7da      	b.n	8005410 <__kernel_rem_pio2+0x58>
 800545a:	4610      	mov	r0, r2
 800545c:	4619      	mov	r1, r3
 800545e:	e7f8      	b.n	8005452 <__kernel_rem_pio2+0x9a>
 8005460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005464:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005468:	f7fb f82e 	bl	80004c8 <__aeabi_dmul>
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005474:	f7fa fe72 	bl	800015c <__adddf3>
 8005478:	e9cd 0100 	strd	r0, r1, [sp]
 800547c:	3601      	adds	r6, #1
 800547e:	9b07      	ldr	r3, [sp, #28]
 8005480:	3f08      	subs	r7, #8
 8005482:	429e      	cmp	r6, r3
 8005484:	ddec      	ble.n	8005460 <__kernel_rem_pio2+0xa8>
 8005486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800548a:	f108 0801 	add.w	r8, r8, #1
 800548e:	e8ea 2302 	strd	r2, r3, [sl], #8
 8005492:	3508      	adds	r5, #8
 8005494:	e7c6      	b.n	8005424 <__kernel_rem_pio2+0x6c>
 8005496:	9b02      	ldr	r3, [sp, #8]
 8005498:	aa0c      	add	r2, sp, #48	; 0x30
 800549a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800549e:	930b      	str	r3, [sp, #44]	; 0x2c
 80054a0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80054a2:	9e02      	ldr	r6, [sp, #8]
 80054a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80054a8:	930a      	str	r3, [sp, #40]	; 0x28
 80054aa:	ab98      	add	r3, sp, #608	; 0x260
 80054ac:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80054b0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80054b4:	ab70      	add	r3, sp, #448	; 0x1c0
 80054b6:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80054ba:	46d0      	mov	r8, sl
 80054bc:	46b1      	mov	r9, r6
 80054be:	af0c      	add	r7, sp, #48	; 0x30
 80054c0:	9700      	str	r7, [sp, #0]
 80054c2:	f1b9 0f00 	cmp.w	r9, #0
 80054c6:	f1a8 0808 	sub.w	r8, r8, #8
 80054ca:	dc70      	bgt.n	80055ae <__kernel_rem_pio2+0x1f6>
 80054cc:	465a      	mov	r2, fp
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	f000 fab1 	bl	8005a38 <scalbn>
 80054d6:	2200      	movs	r2, #0
 80054d8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80054dc:	4604      	mov	r4, r0
 80054de:	460d      	mov	r5, r1
 80054e0:	f7fa fff2 	bl	80004c8 <__aeabi_dmul>
 80054e4:	f000 fb24 	bl	8005b30 <floor>
 80054e8:	2200      	movs	r2, #0
 80054ea:	4b6e      	ldr	r3, [pc, #440]	; (80056a4 <__kernel_rem_pio2+0x2ec>)
 80054ec:	f7fa ffec 	bl	80004c8 <__aeabi_dmul>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4620      	mov	r0, r4
 80054f6:	4629      	mov	r1, r5
 80054f8:	f7fa fe2e 	bl	8000158 <__aeabi_dsub>
 80054fc:	460d      	mov	r5, r1
 80054fe:	4604      	mov	r4, r0
 8005500:	f7fb fa7c 	bl	80009fc <__aeabi_d2iz>
 8005504:	9004      	str	r0, [sp, #16]
 8005506:	f7fa ff75 	bl	80003f4 <__aeabi_i2d>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4620      	mov	r0, r4
 8005510:	4629      	mov	r1, r5
 8005512:	f7fa fe21 	bl	8000158 <__aeabi_dsub>
 8005516:	f1bb 0f00 	cmp.w	fp, #0
 800551a:	4680      	mov	r8, r0
 800551c:	4689      	mov	r9, r1
 800551e:	dd6f      	ble.n	8005600 <__kernel_rem_pio2+0x248>
 8005520:	1e71      	subs	r1, r6, #1
 8005522:	ab0c      	add	r3, sp, #48	; 0x30
 8005524:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005528:	9c04      	ldr	r4, [sp, #16]
 800552a:	f1cb 0018 	rsb	r0, fp, #24
 800552e:	fa43 f200 	asr.w	r2, r3, r0
 8005532:	4414      	add	r4, r2
 8005534:	4082      	lsls	r2, r0
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	aa0c      	add	r2, sp, #48	; 0x30
 800553a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800553e:	f1cb 0217 	rsb	r2, fp, #23
 8005542:	9404      	str	r4, [sp, #16]
 8005544:	4113      	asrs	r3, r2
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	9b00      	ldr	r3, [sp, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	dd66      	ble.n	800561c <__kernel_rem_pio2+0x264>
 800554e:	2200      	movs	r2, #0
 8005550:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005554:	4614      	mov	r4, r2
 8005556:	9b04      	ldr	r3, [sp, #16]
 8005558:	3301      	adds	r3, #1
 800555a:	9304      	str	r3, [sp, #16]
 800555c:	4296      	cmp	r6, r2
 800555e:	f300 80ad 	bgt.w	80056bc <__kernel_rem_pio2+0x304>
 8005562:	f1bb 0f00 	cmp.w	fp, #0
 8005566:	dd07      	ble.n	8005578 <__kernel_rem_pio2+0x1c0>
 8005568:	f1bb 0f01 	cmp.w	fp, #1
 800556c:	f000 80b5 	beq.w	80056da <__kernel_rem_pio2+0x322>
 8005570:	f1bb 0f02 	cmp.w	fp, #2
 8005574:	f000 80bb 	beq.w	80056ee <__kernel_rem_pio2+0x336>
 8005578:	9b00      	ldr	r3, [sp, #0]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d14e      	bne.n	800561c <__kernel_rem_pio2+0x264>
 800557e:	4642      	mov	r2, r8
 8005580:	464b      	mov	r3, r9
 8005582:	2000      	movs	r0, #0
 8005584:	4948      	ldr	r1, [pc, #288]	; (80056a8 <__kernel_rem_pio2+0x2f0>)
 8005586:	f7fa fde7 	bl	8000158 <__aeabi_dsub>
 800558a:	4680      	mov	r8, r0
 800558c:	4689      	mov	r9, r1
 800558e:	2c00      	cmp	r4, #0
 8005590:	d044      	beq.n	800561c <__kernel_rem_pio2+0x264>
 8005592:	465a      	mov	r2, fp
 8005594:	2000      	movs	r0, #0
 8005596:	4944      	ldr	r1, [pc, #272]	; (80056a8 <__kernel_rem_pio2+0x2f0>)
 8005598:	f000 fa4e 	bl	8005a38 <scalbn>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4640      	mov	r0, r8
 80055a2:	4649      	mov	r1, r9
 80055a4:	f7fa fdd8 	bl	8000158 <__aeabi_dsub>
 80055a8:	4680      	mov	r8, r0
 80055aa:	4689      	mov	r9, r1
 80055ac:	e036      	b.n	800561c <__kernel_rem_pio2+0x264>
 80055ae:	2200      	movs	r2, #0
 80055b0:	4b3e      	ldr	r3, [pc, #248]	; (80056ac <__kernel_rem_pio2+0x2f4>)
 80055b2:	4620      	mov	r0, r4
 80055b4:	4629      	mov	r1, r5
 80055b6:	f7fa ff87 	bl	80004c8 <__aeabi_dmul>
 80055ba:	f7fb fa1f 	bl	80009fc <__aeabi_d2iz>
 80055be:	f7fa ff19 	bl	80003f4 <__aeabi_i2d>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055ca:	2200      	movs	r2, #0
 80055cc:	4b38      	ldr	r3, [pc, #224]	; (80056b0 <__kernel_rem_pio2+0x2f8>)
 80055ce:	f7fa ff7b 	bl	80004c8 <__aeabi_dmul>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4620      	mov	r0, r4
 80055d8:	4629      	mov	r1, r5
 80055da:	f7fa fdbd 	bl	8000158 <__aeabi_dsub>
 80055de:	f7fb fa0d 	bl	80009fc <__aeabi_d2iz>
 80055e2:	9b00      	ldr	r3, [sp, #0]
 80055e4:	f109 39ff 	add.w	r9, r9, #4294967295
 80055e8:	f843 0b04 	str.w	r0, [r3], #4
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80055f6:	f7fa fdb1 	bl	800015c <__adddf3>
 80055fa:	4604      	mov	r4, r0
 80055fc:	460d      	mov	r5, r1
 80055fe:	e760      	b.n	80054c2 <__kernel_rem_pio2+0x10a>
 8005600:	d105      	bne.n	800560e <__kernel_rem_pio2+0x256>
 8005602:	1e73      	subs	r3, r6, #1
 8005604:	aa0c      	add	r2, sp, #48	; 0x30
 8005606:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800560a:	15db      	asrs	r3, r3, #23
 800560c:	e79b      	b.n	8005546 <__kernel_rem_pio2+0x18e>
 800560e:	2200      	movs	r2, #0
 8005610:	4b28      	ldr	r3, [pc, #160]	; (80056b4 <__kernel_rem_pio2+0x2fc>)
 8005612:	f7fb f9df 	bl	80009d4 <__aeabi_dcmpge>
 8005616:	2800      	cmp	r0, #0
 8005618:	d13e      	bne.n	8005698 <__kernel_rem_pio2+0x2e0>
 800561a:	9000      	str	r0, [sp, #0]
 800561c:	2200      	movs	r2, #0
 800561e:	2300      	movs	r3, #0
 8005620:	4640      	mov	r0, r8
 8005622:	4649      	mov	r1, r9
 8005624:	f7fb f9b8 	bl	8000998 <__aeabi_dcmpeq>
 8005628:	2800      	cmp	r0, #0
 800562a:	f000 80b2 	beq.w	8005792 <__kernel_rem_pio2+0x3da>
 800562e:	1e74      	subs	r4, r6, #1
 8005630:	4623      	mov	r3, r4
 8005632:	2200      	movs	r2, #0
 8005634:	9902      	ldr	r1, [sp, #8]
 8005636:	428b      	cmp	r3, r1
 8005638:	da60      	bge.n	80056fc <__kernel_rem_pio2+0x344>
 800563a:	2a00      	cmp	r2, #0
 800563c:	d075      	beq.n	800572a <__kernel_rem_pio2+0x372>
 800563e:	ab0c      	add	r3, sp, #48	; 0x30
 8005640:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005644:	f1ab 0b18 	sub.w	fp, fp, #24
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 80a0 	beq.w	800578e <__kernel_rem_pio2+0x3d6>
 800564e:	465a      	mov	r2, fp
 8005650:	2000      	movs	r0, #0
 8005652:	4915      	ldr	r1, [pc, #84]	; (80056a8 <__kernel_rem_pio2+0x2f0>)
 8005654:	f000 f9f0 	bl	8005a38 <scalbn>
 8005658:	46a2      	mov	sl, r4
 800565a:	4606      	mov	r6, r0
 800565c:	460f      	mov	r7, r1
 800565e:	f04f 0800 	mov.w	r8, #0
 8005662:	ab70      	add	r3, sp, #448	; 0x1c0
 8005664:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80056ac <__kernel_rem_pio2+0x2f4>
 8005668:	00e5      	lsls	r5, r4, #3
 800566a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800566e:	f1ba 0f00 	cmp.w	sl, #0
 8005672:	f280 80c4 	bge.w	80057fe <__kernel_rem_pio2+0x446>
 8005676:	4626      	mov	r6, r4
 8005678:	2e00      	cmp	r6, #0
 800567a:	f2c0 80f6 	blt.w	800586a <__kernel_rem_pio2+0x4b2>
 800567e:	4b0e      	ldr	r3, [pc, #56]	; (80056b8 <__kernel_rem_pio2+0x300>)
 8005680:	f04f 0a00 	mov.w	sl, #0
 8005684:	9307      	str	r3, [sp, #28]
 8005686:	ab70      	add	r3, sp, #448	; 0x1c0
 8005688:	f04f 0b00 	mov.w	fp, #0
 800568c:	f04f 0800 	mov.w	r8, #0
 8005690:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005694:	1ba7      	subs	r7, r4, r6
 8005696:	e0dc      	b.n	8005852 <__kernel_rem_pio2+0x49a>
 8005698:	2302      	movs	r3, #2
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	e757      	b.n	800554e <__kernel_rem_pio2+0x196>
 800569e:	bf00      	nop
 80056a0:	08005e50 	.word	0x08005e50
 80056a4:	40200000 	.word	0x40200000
 80056a8:	3ff00000 	.word	0x3ff00000
 80056ac:	3e700000 	.word	0x3e700000
 80056b0:	41700000 	.word	0x41700000
 80056b4:	3fe00000 	.word	0x3fe00000
 80056b8:	08005e10 	.word	0x08005e10
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	b944      	cbnz	r4, 80056d2 <__kernel_rem_pio2+0x31a>
 80056c0:	b11b      	cbz	r3, 80056ca <__kernel_rem_pio2+0x312>
 80056c2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80056c6:	603b      	str	r3, [r7, #0]
 80056c8:	2301      	movs	r3, #1
 80056ca:	461c      	mov	r4, r3
 80056cc:	3201      	adds	r2, #1
 80056ce:	3704      	adds	r7, #4
 80056d0:	e744      	b.n	800555c <__kernel_rem_pio2+0x1a4>
 80056d2:	1acb      	subs	r3, r1, r3
 80056d4:	603b      	str	r3, [r7, #0]
 80056d6:	4623      	mov	r3, r4
 80056d8:	e7f7      	b.n	80056ca <__kernel_rem_pio2+0x312>
 80056da:	1e72      	subs	r2, r6, #1
 80056dc:	ab0c      	add	r3, sp, #48	; 0x30
 80056de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80056e6:	a90c      	add	r1, sp, #48	; 0x30
 80056e8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80056ec:	e744      	b.n	8005578 <__kernel_rem_pio2+0x1c0>
 80056ee:	1e72      	subs	r2, r6, #1
 80056f0:	ab0c      	add	r3, sp, #48	; 0x30
 80056f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80056fa:	e7f4      	b.n	80056e6 <__kernel_rem_pio2+0x32e>
 80056fc:	a90c      	add	r1, sp, #48	; 0x30
 80056fe:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005702:	3b01      	subs	r3, #1
 8005704:	430a      	orrs	r2, r1
 8005706:	e795      	b.n	8005634 <__kernel_rem_pio2+0x27c>
 8005708:	3301      	adds	r3, #1
 800570a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800570e:	2900      	cmp	r1, #0
 8005710:	d0fa      	beq.n	8005708 <__kernel_rem_pio2+0x350>
 8005712:	9a08      	ldr	r2, [sp, #32]
 8005714:	a920      	add	r1, sp, #128	; 0x80
 8005716:	18b2      	adds	r2, r6, r2
 8005718:	f106 0801 	add.w	r8, r6, #1
 800571c:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8005720:	18f4      	adds	r4, r6, r3
 8005722:	4544      	cmp	r4, r8
 8005724:	da04      	bge.n	8005730 <__kernel_rem_pio2+0x378>
 8005726:	4626      	mov	r6, r4
 8005728:	e6bf      	b.n	80054aa <__kernel_rem_pio2+0xf2>
 800572a:	2301      	movs	r3, #1
 800572c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800572e:	e7ec      	b.n	800570a <__kernel_rem_pio2+0x352>
 8005730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005732:	f04f 0900 	mov.w	r9, #0
 8005736:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800573a:	f7fa fe5b 	bl	80003f4 <__aeabi_i2d>
 800573e:	2600      	movs	r6, #0
 8005740:	2700      	movs	r7, #0
 8005742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005744:	e9c5 0100 	strd	r0, r1, [r5]
 8005748:	3b08      	subs	r3, #8
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	9504      	str	r5, [sp, #16]
 800574e:	9b07      	ldr	r3, [sp, #28]
 8005750:	4599      	cmp	r9, r3
 8005752:	dd05      	ble.n	8005760 <__kernel_rem_pio2+0x3a8>
 8005754:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 8005758:	f108 0801 	add.w	r8, r8, #1
 800575c:	3508      	adds	r5, #8
 800575e:	e7e0      	b.n	8005722 <__kernel_rem_pio2+0x36a>
 8005760:	f8dd c010 	ldr.w	ip, [sp, #16]
 8005764:	9900      	ldr	r1, [sp, #0]
 8005766:	f109 0901 	add.w	r9, r9, #1
 800576a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800576e:	9100      	str	r1, [sp, #0]
 8005770:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 8005774:	f8cd c010 	str.w	ip, [sp, #16]
 8005778:	f7fa fea6 	bl	80004c8 <__aeabi_dmul>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4630      	mov	r0, r6
 8005782:	4639      	mov	r1, r7
 8005784:	f7fa fcea 	bl	800015c <__adddf3>
 8005788:	4606      	mov	r6, r0
 800578a:	460f      	mov	r7, r1
 800578c:	e7df      	b.n	800574e <__kernel_rem_pio2+0x396>
 800578e:	3c01      	subs	r4, #1
 8005790:	e755      	b.n	800563e <__kernel_rem_pio2+0x286>
 8005792:	f1cb 0200 	rsb	r2, fp, #0
 8005796:	4640      	mov	r0, r8
 8005798:	4649      	mov	r1, r9
 800579a:	f000 f94d 	bl	8005a38 <scalbn>
 800579e:	2200      	movs	r2, #0
 80057a0:	4ba3      	ldr	r3, [pc, #652]	; (8005a30 <__kernel_rem_pio2+0x678>)
 80057a2:	4604      	mov	r4, r0
 80057a4:	460d      	mov	r5, r1
 80057a6:	f7fb f915 	bl	80009d4 <__aeabi_dcmpge>
 80057aa:	b1f8      	cbz	r0, 80057ec <__kernel_rem_pio2+0x434>
 80057ac:	2200      	movs	r2, #0
 80057ae:	4ba1      	ldr	r3, [pc, #644]	; (8005a34 <__kernel_rem_pio2+0x67c>)
 80057b0:	4620      	mov	r0, r4
 80057b2:	4629      	mov	r1, r5
 80057b4:	f7fa fe88 	bl	80004c8 <__aeabi_dmul>
 80057b8:	f7fb f920 	bl	80009fc <__aeabi_d2iz>
 80057bc:	4607      	mov	r7, r0
 80057be:	f7fa fe19 	bl	80003f4 <__aeabi_i2d>
 80057c2:	2200      	movs	r2, #0
 80057c4:	4b9a      	ldr	r3, [pc, #616]	; (8005a30 <__kernel_rem_pio2+0x678>)
 80057c6:	f7fa fe7f 	bl	80004c8 <__aeabi_dmul>
 80057ca:	460b      	mov	r3, r1
 80057cc:	4602      	mov	r2, r0
 80057ce:	4629      	mov	r1, r5
 80057d0:	4620      	mov	r0, r4
 80057d2:	f7fa fcc1 	bl	8000158 <__aeabi_dsub>
 80057d6:	f7fb f911 	bl	80009fc <__aeabi_d2iz>
 80057da:	1c74      	adds	r4, r6, #1
 80057dc:	ab0c      	add	r3, sp, #48	; 0x30
 80057de:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80057e2:	f10b 0b18 	add.w	fp, fp, #24
 80057e6:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 80057ea:	e730      	b.n	800564e <__kernel_rem_pio2+0x296>
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fb f904 	bl	80009fc <__aeabi_d2iz>
 80057f4:	ab0c      	add	r3, sp, #48	; 0x30
 80057f6:	4634      	mov	r4, r6
 80057f8:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 80057fc:	e727      	b.n	800564e <__kernel_rem_pio2+0x296>
 80057fe:	ab0c      	add	r3, sp, #48	; 0x30
 8005800:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005804:	f7fa fdf6 	bl	80003f4 <__aeabi_i2d>
 8005808:	4632      	mov	r2, r6
 800580a:	463b      	mov	r3, r7
 800580c:	f7fa fe5c 	bl	80004c8 <__aeabi_dmul>
 8005810:	4642      	mov	r2, r8
 8005812:	e86b 0102 	strd	r0, r1, [fp], #-8
 8005816:	464b      	mov	r3, r9
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	f7fa fe54 	bl	80004c8 <__aeabi_dmul>
 8005820:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005824:	4606      	mov	r6, r0
 8005826:	460f      	mov	r7, r1
 8005828:	e721      	b.n	800566e <__kernel_rem_pio2+0x2b6>
 800582a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800582e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005832:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8005836:	f8cd c01c 	str.w	ip, [sp, #28]
 800583a:	f7fa fe45 	bl	80004c8 <__aeabi_dmul>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4650      	mov	r0, sl
 8005844:	4659      	mov	r1, fp
 8005846:	f7fa fc89 	bl	800015c <__adddf3>
 800584a:	4682      	mov	sl, r0
 800584c:	468b      	mov	fp, r1
 800584e:	f108 0801 	add.w	r8, r8, #1
 8005852:	9b02      	ldr	r3, [sp, #8]
 8005854:	4598      	cmp	r8, r3
 8005856:	dc01      	bgt.n	800585c <__kernel_rem_pio2+0x4a4>
 8005858:	45b8      	cmp	r8, r7
 800585a:	dde6      	ble.n	800582a <__kernel_rem_pio2+0x472>
 800585c:	ab48      	add	r3, sp, #288	; 0x120
 800585e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005862:	e9c7 ab00 	strd	sl, fp, [r7]
 8005866:	3e01      	subs	r6, #1
 8005868:	e706      	b.n	8005678 <__kernel_rem_pio2+0x2c0>
 800586a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800586c:	2b02      	cmp	r3, #2
 800586e:	dc09      	bgt.n	8005884 <__kernel_rem_pio2+0x4cc>
 8005870:	2b00      	cmp	r3, #0
 8005872:	dc32      	bgt.n	80058da <__kernel_rem_pio2+0x522>
 8005874:	d058      	beq.n	8005928 <__kernel_rem_pio2+0x570>
 8005876:	9b04      	ldr	r3, [sp, #16]
 8005878:	f003 0007 	and.w	r0, r3, #7
 800587c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005884:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8005886:	2b03      	cmp	r3, #3
 8005888:	d1f5      	bne.n	8005876 <__kernel_rem_pio2+0x4be>
 800588a:	ab48      	add	r3, sp, #288	; 0x120
 800588c:	441d      	add	r5, r3
 800588e:	46aa      	mov	sl, r5
 8005890:	46a3      	mov	fp, r4
 8005892:	f1bb 0f00 	cmp.w	fp, #0
 8005896:	dc74      	bgt.n	8005982 <__kernel_rem_pio2+0x5ca>
 8005898:	46aa      	mov	sl, r5
 800589a:	46a3      	mov	fp, r4
 800589c:	f1bb 0f01 	cmp.w	fp, #1
 80058a0:	f300 808e 	bgt.w	80059c0 <__kernel_rem_pio2+0x608>
 80058a4:	2700      	movs	r7, #0
 80058a6:	463e      	mov	r6, r7
 80058a8:	2c01      	cmp	r4, #1
 80058aa:	f300 80a8 	bgt.w	80059fe <__kernel_rem_pio2+0x646>
 80058ae:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80058b2:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80058b6:	9b00      	ldr	r3, [sp, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f040 80aa 	bne.w	8005a12 <__kernel_rem_pio2+0x65a>
 80058be:	4603      	mov	r3, r0
 80058c0:	462a      	mov	r2, r5
 80058c2:	9806      	ldr	r0, [sp, #24]
 80058c4:	e9c0 2300 	strd	r2, r3, [r0]
 80058c8:	4622      	mov	r2, r4
 80058ca:	460b      	mov	r3, r1
 80058cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80058d0:	463a      	mov	r2, r7
 80058d2:	4633      	mov	r3, r6
 80058d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80058d8:	e7cd      	b.n	8005876 <__kernel_rem_pio2+0x4be>
 80058da:	2000      	movs	r0, #0
 80058dc:	46a0      	mov	r8, r4
 80058de:	4601      	mov	r1, r0
 80058e0:	ab48      	add	r3, sp, #288	; 0x120
 80058e2:	441d      	add	r5, r3
 80058e4:	f1b8 0f00 	cmp.w	r8, #0
 80058e8:	da38      	bge.n	800595c <__kernel_rem_pio2+0x5a4>
 80058ea:	9b00      	ldr	r3, [sp, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d03c      	beq.n	800596a <__kernel_rem_pio2+0x5b2>
 80058f0:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 80058f4:	4602      	mov	r2, r0
 80058f6:	462b      	mov	r3, r5
 80058f8:	9d06      	ldr	r5, [sp, #24]
 80058fa:	2601      	movs	r6, #1
 80058fc:	e9c5 2300 	strd	r2, r3, [r5]
 8005900:	460b      	mov	r3, r1
 8005902:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005906:	f7fa fc27 	bl	8000158 <__aeabi_dsub>
 800590a:	4684      	mov	ip, r0
 800590c:	460f      	mov	r7, r1
 800590e:	ad48      	add	r5, sp, #288	; 0x120
 8005910:	42b4      	cmp	r4, r6
 8005912:	da2c      	bge.n	800596e <__kernel_rem_pio2+0x5b6>
 8005914:	9b00      	ldr	r3, [sp, #0]
 8005916:	b10b      	cbz	r3, 800591c <__kernel_rem_pio2+0x564>
 8005918:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800591c:	4662      	mov	r2, ip
 800591e:	463b      	mov	r3, r7
 8005920:	9906      	ldr	r1, [sp, #24]
 8005922:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8005926:	e7a6      	b.n	8005876 <__kernel_rem_pio2+0x4be>
 8005928:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800592a:	ab48      	add	r3, sp, #288	; 0x120
 800592c:	4637      	mov	r7, r6
 800592e:	441d      	add	r5, r3
 8005930:	2c00      	cmp	r4, #0
 8005932:	da09      	bge.n	8005948 <__kernel_rem_pio2+0x590>
 8005934:	9b00      	ldr	r3, [sp, #0]
 8005936:	b10b      	cbz	r3, 800593c <__kernel_rem_pio2+0x584>
 8005938:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800593c:	4632      	mov	r2, r6
 800593e:	463b      	mov	r3, r7
 8005940:	9906      	ldr	r1, [sp, #24]
 8005942:	e9c1 2300 	strd	r2, r3, [r1]
 8005946:	e796      	b.n	8005876 <__kernel_rem_pio2+0x4be>
 8005948:	4630      	mov	r0, r6
 800594a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800594e:	4639      	mov	r1, r7
 8005950:	f7fa fc04 	bl	800015c <__adddf3>
 8005954:	3c01      	subs	r4, #1
 8005956:	4606      	mov	r6, r0
 8005958:	460f      	mov	r7, r1
 800595a:	e7e9      	b.n	8005930 <__kernel_rem_pio2+0x578>
 800595c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005960:	f7fa fbfc 	bl	800015c <__adddf3>
 8005964:	f108 38ff 	add.w	r8, r8, #4294967295
 8005968:	e7bc      	b.n	80058e4 <__kernel_rem_pio2+0x52c>
 800596a:	460d      	mov	r5, r1
 800596c:	e7c2      	b.n	80058f4 <__kernel_rem_pio2+0x53c>
 800596e:	4660      	mov	r0, ip
 8005970:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8005974:	4639      	mov	r1, r7
 8005976:	f7fa fbf1 	bl	800015c <__adddf3>
 800597a:	3601      	adds	r6, #1
 800597c:	4684      	mov	ip, r0
 800597e:	460f      	mov	r7, r1
 8005980:	e7c6      	b.n	8005910 <__kernel_rem_pio2+0x558>
 8005982:	e9da 6700 	ldrd	r6, r7, [sl]
 8005986:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800598a:	4632      	mov	r2, r6
 800598c:	463b      	mov	r3, r7
 800598e:	4640      	mov	r0, r8
 8005990:	4649      	mov	r1, r9
 8005992:	f7fa fbe3 	bl	800015c <__adddf3>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800599e:	4640      	mov	r0, r8
 80059a0:	4649      	mov	r1, r9
 80059a2:	f7fa fbd9 	bl	8000158 <__aeabi_dsub>
 80059a6:	4632      	mov	r2, r6
 80059a8:	463b      	mov	r3, r7
 80059aa:	f7fa fbd7 	bl	800015c <__adddf3>
 80059ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059b2:	e86a 0102 	strd	r0, r1, [sl], #-8
 80059b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059ba:	e9ca 2300 	strd	r2, r3, [sl]
 80059be:	e768      	b.n	8005892 <__kernel_rem_pio2+0x4da>
 80059c0:	e9da 8900 	ldrd	r8, r9, [sl]
 80059c4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 80059c8:	4642      	mov	r2, r8
 80059ca:	464b      	mov	r3, r9
 80059cc:	4630      	mov	r0, r6
 80059ce:	4639      	mov	r1, r7
 80059d0:	f7fa fbc4 	bl	800015c <__adddf3>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059dc:	4630      	mov	r0, r6
 80059de:	4639      	mov	r1, r7
 80059e0:	f7fa fbba 	bl	8000158 <__aeabi_dsub>
 80059e4:	4642      	mov	r2, r8
 80059e6:	464b      	mov	r3, r9
 80059e8:	f7fa fbb8 	bl	800015c <__adddf3>
 80059ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059f0:	e86a 0102 	strd	r0, r1, [sl], #-8
 80059f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059f8:	e9ca 2300 	strd	r2, r3, [sl]
 80059fc:	e74e      	b.n	800589c <__kernel_rem_pio2+0x4e4>
 80059fe:	4638      	mov	r0, r7
 8005a00:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8005a04:	4631      	mov	r1, r6
 8005a06:	f7fa fba9 	bl	800015c <__adddf3>
 8005a0a:	3c01      	subs	r4, #1
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	460e      	mov	r6, r1
 8005a10:	e74a      	b.n	80058a8 <__kernel_rem_pio2+0x4f0>
 8005a12:	9b06      	ldr	r3, [sp, #24]
 8005a14:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005a18:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005a1c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8005a20:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8005a24:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8005a28:	601d      	str	r5, [r3, #0]
 8005a2a:	615e      	str	r6, [r3, #20]
 8005a2c:	e723      	b.n	8005876 <__kernel_rem_pio2+0x4be>
 8005a2e:	bf00      	nop
 8005a30:	41700000 	.word	0x41700000
 8005a34:	3e700000 	.word	0x3e700000

08005a38 <scalbn>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	4616      	mov	r6, r2
 8005a3c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a40:	4604      	mov	r4, r0
 8005a42:	460d      	mov	r5, r1
 8005a44:	460b      	mov	r3, r1
 8005a46:	b992      	cbnz	r2, 8005a6e <scalbn+0x36>
 8005a48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a4c:	4303      	orrs	r3, r0
 8005a4e:	d03c      	beq.n	8005aca <scalbn+0x92>
 8005a50:	4b31      	ldr	r3, [pc, #196]	; (8005b18 <scalbn+0xe0>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	f7fa fd38 	bl	80004c8 <__aeabi_dmul>
 8005a58:	4b30      	ldr	r3, [pc, #192]	; (8005b1c <scalbn+0xe4>)
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	429e      	cmp	r6, r3
 8005a5e:	460d      	mov	r5, r1
 8005a60:	da0f      	bge.n	8005a82 <scalbn+0x4a>
 8005a62:	a329      	add	r3, pc, #164	; (adr r3, 8005b08 <scalbn+0xd0>)
 8005a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a68:	f7fa fd2e 	bl	80004c8 <__aeabi_dmul>
 8005a6c:	e006      	b.n	8005a7c <scalbn+0x44>
 8005a6e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005a72:	42ba      	cmp	r2, r7
 8005a74:	d109      	bne.n	8005a8a <scalbn+0x52>
 8005a76:	4602      	mov	r2, r0
 8005a78:	f7fa fb70 	bl	800015c <__adddf3>
 8005a7c:	4604      	mov	r4, r0
 8005a7e:	460d      	mov	r5, r1
 8005a80:	e023      	b.n	8005aca <scalbn+0x92>
 8005a82:	460b      	mov	r3, r1
 8005a84:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a88:	3a36      	subs	r2, #54	; 0x36
 8005a8a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005a8e:	428e      	cmp	r6, r1
 8005a90:	dd0e      	ble.n	8005ab0 <scalbn+0x78>
 8005a92:	a31f      	add	r3, pc, #124	; (adr r3, 8005b10 <scalbn+0xd8>)
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005a9c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005aa0:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005aa4:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005aa8:	481d      	ldr	r0, [pc, #116]	; (8005b20 <scalbn+0xe8>)
 8005aaa:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005aae:	e7db      	b.n	8005a68 <scalbn+0x30>
 8005ab0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005ab4:	4432      	add	r2, r6
 8005ab6:	428a      	cmp	r2, r1
 8005ab8:	dceb      	bgt.n	8005a92 <scalbn+0x5a>
 8005aba:	2a00      	cmp	r2, #0
 8005abc:	dd08      	ble.n	8005ad0 <scalbn+0x98>
 8005abe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ac2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ac6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005aca:	4620      	mov	r0, r4
 8005acc:	4629      	mov	r1, r5
 8005ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ad0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005ad4:	da0c      	bge.n	8005af0 <scalbn+0xb8>
 8005ad6:	a30c      	add	r3, pc, #48	; (adr r3, 8005b08 <scalbn+0xd0>)
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005ae0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005ae4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005ae8:	480e      	ldr	r0, [pc, #56]	; (8005b24 <scalbn+0xec>)
 8005aea:	f041 011f 	orr.w	r1, r1, #31
 8005aee:	e7bb      	b.n	8005a68 <scalbn+0x30>
 8005af0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005af4:	3236      	adds	r2, #54	; 0x36
 8005af6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005afa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005afe:	4620      	mov	r0, r4
 8005b00:	4629      	mov	r1, r5
 8005b02:	2200      	movs	r2, #0
 8005b04:	4b08      	ldr	r3, [pc, #32]	; (8005b28 <scalbn+0xf0>)
 8005b06:	e7af      	b.n	8005a68 <scalbn+0x30>
 8005b08:	c2f8f359 	.word	0xc2f8f359
 8005b0c:	01a56e1f 	.word	0x01a56e1f
 8005b10:	8800759c 	.word	0x8800759c
 8005b14:	7e37e43c 	.word	0x7e37e43c
 8005b18:	43500000 	.word	0x43500000
 8005b1c:	ffff3cb0 	.word	0xffff3cb0
 8005b20:	8800759c 	.word	0x8800759c
 8005b24:	c2f8f359 	.word	0xc2f8f359
 8005b28:	3c900000 	.word	0x3c900000
 8005b2c:	00000000 	.word	0x00000000

08005b30 <floor>:
 8005b30:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b38:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005b3c:	2e13      	cmp	r6, #19
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4607      	mov	r7, r0
 8005b42:	460c      	mov	r4, r1
 8005b44:	4605      	mov	r5, r0
 8005b46:	dc32      	bgt.n	8005bae <floor+0x7e>
 8005b48:	2e00      	cmp	r6, #0
 8005b4a:	da14      	bge.n	8005b76 <floor+0x46>
 8005b4c:	a334      	add	r3, pc, #208	; (adr r3, 8005c20 <floor+0xf0>)
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f7fa fb03 	bl	800015c <__adddf3>
 8005b56:	2200      	movs	r2, #0
 8005b58:	2300      	movs	r3, #0
 8005b5a:	f7fa ff45 	bl	80009e8 <__aeabi_dcmpgt>
 8005b5e:	b138      	cbz	r0, 8005b70 <floor+0x40>
 8005b60:	2c00      	cmp	r4, #0
 8005b62:	da56      	bge.n	8005c12 <floor+0xe2>
 8005b64:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8005b68:	4325      	orrs	r5, r4
 8005b6a:	d055      	beq.n	8005c18 <floor+0xe8>
 8005b6c:	2500      	movs	r5, #0
 8005b6e:	4c2e      	ldr	r4, [pc, #184]	; (8005c28 <floor+0xf8>)
 8005b70:	4623      	mov	r3, r4
 8005b72:	462f      	mov	r7, r5
 8005b74:	e025      	b.n	8005bc2 <floor+0x92>
 8005b76:	4a2d      	ldr	r2, [pc, #180]	; (8005c2c <floor+0xfc>)
 8005b78:	fa42 f806 	asr.w	r8, r2, r6
 8005b7c:	ea01 0208 	and.w	r2, r1, r8
 8005b80:	4302      	orrs	r2, r0
 8005b82:	d01e      	beq.n	8005bc2 <floor+0x92>
 8005b84:	a326      	add	r3, pc, #152	; (adr r3, 8005c20 <floor+0xf0>)
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f7fa fae7 	bl	800015c <__adddf3>
 8005b8e:	2200      	movs	r2, #0
 8005b90:	2300      	movs	r3, #0
 8005b92:	f7fa ff29 	bl	80009e8 <__aeabi_dcmpgt>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	d0ea      	beq.n	8005b70 <floor+0x40>
 8005b9a:	2c00      	cmp	r4, #0
 8005b9c:	bfbe      	ittt	lt
 8005b9e:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005ba2:	4133      	asrlt	r3, r6
 8005ba4:	18e4      	addlt	r4, r4, r3
 8005ba6:	2500      	movs	r5, #0
 8005ba8:	ea24 0408 	bic.w	r4, r4, r8
 8005bac:	e7e0      	b.n	8005b70 <floor+0x40>
 8005bae:	2e33      	cmp	r6, #51	; 0x33
 8005bb0:	dd0b      	ble.n	8005bca <floor+0x9a>
 8005bb2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005bb6:	d104      	bne.n	8005bc2 <floor+0x92>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	f7fa facf 	bl	800015c <__adddf3>
 8005bbe:	4607      	mov	r7, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4638      	mov	r0, r7
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bca:	f04f 38ff 	mov.w	r8, #4294967295
 8005bce:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005bd2:	fa28 f802 	lsr.w	r8, r8, r2
 8005bd6:	ea10 0f08 	tst.w	r0, r8
 8005bda:	d0f2      	beq.n	8005bc2 <floor+0x92>
 8005bdc:	a310      	add	r3, pc, #64	; (adr r3, 8005c20 <floor+0xf0>)
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	f7fa fabb 	bl	800015c <__adddf3>
 8005be6:	2200      	movs	r2, #0
 8005be8:	2300      	movs	r3, #0
 8005bea:	f7fa fefd 	bl	80009e8 <__aeabi_dcmpgt>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	d0be      	beq.n	8005b70 <floor+0x40>
 8005bf2:	2c00      	cmp	r4, #0
 8005bf4:	da0a      	bge.n	8005c0c <floor+0xdc>
 8005bf6:	2e14      	cmp	r6, #20
 8005bf8:	d101      	bne.n	8005bfe <floor+0xce>
 8005bfa:	3401      	adds	r4, #1
 8005bfc:	e006      	b.n	8005c0c <floor+0xdc>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005c04:	40b3      	lsls	r3, r6
 8005c06:	441d      	add	r5, r3
 8005c08:	42af      	cmp	r7, r5
 8005c0a:	d8f6      	bhi.n	8005bfa <floor+0xca>
 8005c0c:	ea25 0508 	bic.w	r5, r5, r8
 8005c10:	e7ae      	b.n	8005b70 <floor+0x40>
 8005c12:	2500      	movs	r5, #0
 8005c14:	462c      	mov	r4, r5
 8005c16:	e7ab      	b.n	8005b70 <floor+0x40>
 8005c18:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005c1c:	e7a8      	b.n	8005b70 <floor+0x40>
 8005c1e:	bf00      	nop
 8005c20:	8800759c 	.word	0x8800759c
 8005c24:	7e37e43c 	.word	0x7e37e43c
 8005c28:	bff00000 	.word	0xbff00000
 8005c2c:	000fffff 	.word	0x000fffff

08005c30 <_init>:
 8005c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c32:	bf00      	nop
 8005c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c36:	bc08      	pop	{r3}
 8005c38:	469e      	mov	lr, r3
 8005c3a:	4770      	bx	lr

08005c3c <_fini>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	bf00      	nop
 8005c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c42:	bc08      	pop	{r3}
 8005c44:	469e      	mov	lr, r3
 8005c46:	4770      	bx	lr
